# PantelMed - –ü–æ–≤–Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –∑ Telegram —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—î—é, –ø–ª–∞—Ç–µ–∂–∞–º–∏, –ë–ê–î–∏ –º–∞–≥–∞–∑–∏–Ω–æ–º —Ç–∞ CRM —Å–∏—Å—Ç–µ–º–æ—é
# app.py

from flask import Flask, jsonify, request, send_from_directory, render_template_string
from flask_cors import CORS
import requests
from datetime import datetime, timedelta
from pymongo import MongoClient
from pymongo.errors import ConnectionFailure, OperationFailure, ServerSelectionTimeoutError
import hashlib
import hmac
import json
import os
import threading
import time
from dataclasses import dataclass
from typing import Dict, Optional
import logging

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

app = Flask(__name__)
CORS(app)  # –î–æ–∑–≤–æ–ª—è—î–º–æ CORS –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥—É

# ==============================================
# –ö–û–ù–§–Ü–ì–£–†–ê–¶–Ü–Ø
# ==============================================

# TRON Wallet Configuration
TRON_WALLET = "TQeHa8VdwfyybxtioW4ggbnDC1rbWe8nFa"
MIN_AMOUNT = 2.6
MIN_AMOUNT_TEST = 0.5
SUBSCRIPTION_DAYS = 30

# Telegram Bot Configuration
TELEGRAM_BOT_TOKEN = "8116552220:AAHiOZdROOQKtj09ZDvLRYZw2FNKPQrmMV4"
TELEGRAM_BOT_USERNAME = "pantelmed_bot"
ADMIN_TELEGRAM_ID = "YOUR_ADMIN_ID"  # –ó–∞–º—ñ–Ω–∏—Ç–∏ –Ω–∞ –≤–∞—à Telegram ID

# MongoDB Configuration
MONGO_URI = "mongodb+srv://Vlad:manreds7@cluster0.d0qnz.mongodb.net/pantelmed?retryWrites=true&w=majority&appName=Cluster0"

# Shop Configuration - –û–ù–û–í–õ–ï–ù–Ü –¶–Ü–ù–ò
SHOP_PRODUCTS = {
    'omega3': {'name': '–û–º–µ–≥–∞-3 –ü—Ä–µ–º—ñ—É–º', 'price': 0.9, 'emoji': 'üêü'},
    'vitamin_d3': {'name': '–í—ñ—Ç–∞–º—ñ–Ω D3 + K2', 'price': 0.8, 'emoji': '‚òÄÔ∏è'},
    'magnesium': {'name': '–ú–∞–≥–Ω—ñ–π –•–µ–ª–∞—Ç', 'price': 0.7, 'emoji': '‚ö°'},
    'zinc': {'name': '–¶–∏–Ω–∫ –ü—ñ–∫–æ–ª—ñ–Ω–∞—Ç', 'price': 0.8, 'emoji': 'üõ°Ô∏è'},
    'complex': {'name': '–ú—É–ª—å—Ç–∏–≤—ñ—Ç–∞–º—ñ–Ω–Ω–∏–π –∫–æ–º–ø–ª–µ–∫—Å', 'price': 0.9, 'emoji': 'üíä'},
    'probiotics': {'name': '–ü—Ä–æ–±—ñ–æ—Ç–∏–∫–∏ –ü—Ä–µ–º—ñ—É–º', 'price': 0.7, 'emoji': 'ü¶†'}
}

# Admin Panel Password
ADMIN_PASSWORD = "pantelmed_admin_2024"

# ==============================================
# MONGODB –Ü–ù–Ü–¶–Ü–ê–õ–Ü–ó–ê–¶–Ü–Ø
# ==============================================

def init_mongodb():
    """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è MongoDB –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è"""
    try:
        logger.info("üîó Connecting to MongoDB...")
        
        client = MongoClient(
            MONGO_URI,
            serverSelectionTimeoutMS=10000,
            connectTimeoutMS=15000,
            socketTimeoutMS=20000
        )
        
        # –¢–µ—Å—Ç—É—î–º–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
        client.admin.command('ping')
        logger.info("‚úÖ MongoDB connection successful!")
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –±–∞–∑—É –¥–∞–Ω–∏—Ö
        db = client["pantelmed"]
        
        # –¢–µ—Å—Ç—É—î–º–æ –¥–æ—Å—Ç—É–ø
        try:
            collections = db.list_collection_names()
            logger.info(f"‚úÖ Database access successful! Collections: {collections}")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Collection list failed but connection works: {e}")
        
        return client, db
        
    except Exception as e:
        logger.error(f"‚ùå MongoDB connection failed: {e}")
        return None, None

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è MongoDB
logger.info("üöÄ Initializing MongoDB connection...")
mongo_client, db = init_mongodb()

if mongo_client is None or db is None:
    logger.critical("üö® CRITICAL: MongoDB connection failed!")
    users_collection = None
    transactions_collection = None
    subscriptions_collection = None
    orders_collection = None
else:
    logger.info("‚úÖ MongoDB ready for use!")
    # –ö–æ–ª–µ–∫—Ü—ñ—ó MongoDB
    users_collection = db["users"]
    transactions_collection = db["transactions"] 
    subscriptions_collection = db["subscriptions"]
    orders_collection = db["orders"]  # –ö–æ–ª–µ–∫—Ü—ñ—è –¥–ª—è –∑–∞–º–æ–≤–ª–µ–Ω—å –ë–ê–î—ñ–≤

# ==============================================
# –î–û–ü–û–ú–Ü–ñ–ù–Ü –§–£–ù–ö–¶–Ü–á
# ==============================================

def safe_db_operation(operation_name, operation_func):
    """–ë–µ–∑–ø–µ—á–Ω–µ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –æ–ø–µ—Ä–∞—Ü—ñ–π –∑ –±–∞–∑–æ—é –¥–∞–Ω–∏—Ö"""
    try:
        if db is None:
            logger.error(f"‚ùå {operation_name}: Database not connected")
            return None
        return operation_func()
    except Exception as e:
        logger.error(f"‚ùå {operation_name} failed: {e}")
        return None

def generate_payment_id(user_id):
    """–ì–µ–Ω–µ—Ä—É—î–º–æ —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π ID –¥–ª—è –ø–ª–∞—Ç–µ–∂—É"""
    return hashlib.md5(f"{user_id}_{datetime.utcnow().isoformat()}".encode()).hexdigest()[:12]

def generate_order_id(user_id):
    """–ì–µ–Ω–µ—Ä—É—î–º–æ —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π ID –¥–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è"""
    timestamp = int(datetime.utcnow().timestamp())
    user_suffix = user_id.split('_')[-1][:8] if '_' in user_id else user_id[:8]
    return f"ORDER_{timestamp}_{user_suffix}"

def verify_telegram_auth(auth_data):
    """–í–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—è –∞–≤—Ç–µ–Ω—Ç–∏—á–Ω–æ—Å—Ç—ñ –¥–∞–Ω–∏—Ö –≤—ñ–¥ Telegram Login Widget"""
    check_hash = auth_data.pop('hash', None)
    if not check_hash:
        return False
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ —Ä—è–¥–æ–∫ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
    data_check_arr = []
    for key, value in sorted(auth_data.items()):
        data_check_arr.append(f"{key}={value}")
    data_check_string = '\n'.join(data_check_arr)
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ —Å–µ–∫—Ä–µ—Ç–Ω–∏–π –∫–ª—é—á
    secret_key = hashlib.sha256(TELEGRAM_BOT_TOKEN.encode()).digest()
    
    # –ì–µ–Ω–µ—Ä—É—î–º–æ —Ö–µ—à
    calculated_hash = hmac.new(
        secret_key,
        data_check_string.encode(),
        hashlib.sha256
    ).hexdigest()
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∑–±—ñ–≥
    return hmac.compare_digest(calculated_hash, check_hash)

# ==============================================
# –°–¢–ê–¢–ò–ß–ù–Ü –§–ê–ô–õ–ò
# ==============================================

@app.route('/')
def serve_index():
    """–ì–æ–ª–æ–≤–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞ - –º–µ–¥–∏—á–Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –∑ –∫–≤—ñ–∑–æ–º"""
    return send_from_directory('.', 'index.html')

@app.route('/shop.html')
def serve_shop():
    """–°—Ç–æ—Ä—ñ–Ω–∫–∞ –º–∞–≥–∞–∑–∏–Ω—É –ë–ê–î—ñ–≤"""
    return send_from_directory('.', 'shop.html')

@app.route('/pay.html')
def serve_pay():
    """–£–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞ –æ–ø–ª–∞—Ç–∏"""
    return send_from_directory('.', 'pay.html')

@app.route('/thankyou.html')
def serve_thankyou():
    """–°—Ç–æ—Ä—ñ–Ω–∫–∞ –ø–æ–¥—è–∫–∏ –∑–∞ –ø—ñ–¥–ø–∏—Å–∫—É"""
    return send_from_directory('.', 'thankyou.html')

@app.route('/thankyou_supplements.html')
def serve_thankyou_supplements():
    """–°—Ç–æ—Ä—ñ–Ω–∫–∞ –ø–æ–¥—è–∫–∏ –∑–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –ë–ê–î—ñ–≤"""
    return send_from_directory('.', 'thankyou_supplements.html')

@app.route('/admin')
def serve_admin():
    """–ê–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—å –∑ CRM —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª–æ–º"""
    admin_html = """
    <!DOCTYPE html>
    <html>
    <head>
        <title>PantelMed Admin & CRM</title>
        <meta charset="UTF-8">
        <style>
            body { font-family: Arial, sans-serif; margin: 40px; background: #f5f5f5; }
            .container { max-width: 1200px; margin: 0 auto; }
            .header { background: #4CAF50; color: white; padding: 20px; border-radius: 8px; margin-bottom: 20px; }
            .stats { display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 20px; margin: 20px 0; }
            .stat-card { background: white; padding: 20px; border-radius: 8px; text-align: center; box-shadow: 0 2px 4px rgba(0,0,0,0.1); }
            .stat-number { font-size: 32px; font-weight: bold; color: #4CAF50; }
            .tabs { display: flex; gap: 10px; margin: 20px 0; }
            .tab { background: white; padding: 15px 25px; border-radius: 8px; cursor: pointer; border: 2px solid #ddd; }
            .tab.active { border-color: #4CAF50; background: #4CAF50; color: white; }
            .content-area { background: white; padding: 25px; border-radius: 8px; box-shadow: 0 2px 4px rgba(0,0,0,0.1); }
            .orders-table { width: 100%; border-collapse: collapse; margin: 20px 0; }
            .orders-table th, .orders-table td { padding: 12px; text-align: left; border-bottom: 1px solid #ddd; }
            .orders-table th { background: #f8f9fa; }
            .status-badge { padding: 4px 8px; border-radius: 4px; font-size: 12px; font-weight: bold; }
            .status-pending { background: #fff3cd; color: #856404; }
            .status-paid { background: #d4edda; color: #155724; }
            .status-shipped { background: #d1ecf1; color: #0c5460; }
        </style>
    </head>
    <body>
        <div class="container">
            <div class="header">
                <h1>üè• PantelMed Admin & CRM</h1>
                <p>–£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–æ—é —Ç–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è–º–∏</p>
            </div>
            
            <div class="stats">
                <div class="stat-card">
                    <div class="stat-number" id="users-count">0</div>
                    <div>–í—Å—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤</div>
                </div>
                <div class="stat-card">
                    <div class="stat-number" id="orders-count">0</div>
                    <div>–ó–∞–º–æ–≤–ª–µ–Ω—å –ë–ê–î—ñ–≤</div>
                </div>
                <div class="stat-card">
                    <div class="stat-number" id="subscriptions-count">0</div>
                    <div>–ê–∫—Ç–∏–≤–Ω–∏—Ö –ø—ñ–¥–ø–∏—Å–æ–∫</div>
                </div>
                <div class="stat-card">
                    <div class="stat-number" id="revenue-count">$0</div>
                    <div>–ó–∞–≥–∞–ª—å–Ω–∏–π –¥–æ—Ö—ñ–¥</div>
                </div>
            </div>
            
            <div class="tabs">
                <div class="tab active" onclick="showTab('overview')">üìä –û–≥–ª—è–¥</div>
                <div class="tab" onclick="showTab('orders')">üì¶ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –ë–ê–î—ñ–≤</div>
                <div class="tab" onclick="showTab('subscriptions')">üíä –ü—ñ–¥–ø–∏—Å–∫–∏</div>
                <div class="tab" onclick="showTab('users')">üë• –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ</div>
            </div>
            
            <div class="content-area">
                <!-- –û–≥–ª—è–¥ -->
                <div id="overview-content">
                    <h3>üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º–∏</h3>
                    <p><strong>MongoDB:</strong> <span style="color: green;">–ü—ñ–¥–∫–ª—é—á–µ–Ω–æ</span></p>
                    <p><strong>TRON Wallet:</strong> """ + TRON_WALLET + """</p>
                    <p><strong>Telegram Bot:</strong> @""" + TELEGRAM_BOT_USERNAME + """</p>
                    <p><strong>API URL:</strong> https://pantelmed-api.onrender.com</p>
                    
                    <h4>üõí –ö–∞—Ç–∞–ª–æ–≥ –ë–ê–î—ñ–≤:</h4>
                    <ul>
                        <li>üêü –û–º–µ–≥–∞-3 –ü—Ä–µ–º—ñ—É–º - $0.90</li>
                        <li>‚òÄÔ∏è –í—ñ—Ç–∞–º—ñ–Ω D3 + K2 - $0.80</li>
                        <li>‚ö° –ú–∞–≥–Ω—ñ–π –•–µ–ª–∞—Ç - $0.70</li>
                        <li>üõ°Ô∏è –¶–∏–Ω–∫ –ü—ñ–∫–æ–ª—ñ–Ω–∞—Ç - $0.80</li>
                        <li>üíä –ú—É–ª—å—Ç–∏–≤—ñ—Ç–∞–º—ñ–Ω–Ω–∏–π –∫–æ–º–ø–ª–µ–∫—Å - $0.90</li>
                        <li>ü¶† –ü—Ä–æ–±—ñ–æ—Ç–∏–∫–∏ –ü—Ä–µ–º—ñ—É–º - $0.70</li>
                    </ul>
                </div>
                
                <!-- –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –ë–ê–î—ñ–≤ -->
                <div id="orders-content" style="display: none;">
                    <h3>üì¶ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –ë–ê–î—ñ–≤ (CRM)</h3>
                    <p style="color: #666; font-style: italic;">üöß CRM —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ</p>
                    
                    <table class="orders-table">
                        <thead>
                            <tr>
                                <th>ID –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è</th>
                                <th>–ö–ª—ñ—î–Ω—Ç</th>
                                <th>–¢–æ–≤–∞—Ä–∏</th>
                                <th>–°—É–º–∞</th>
                                <th>–°—Ç–∞—Ç—É—Å</th>
                                <th>–î–∞—Ç–∞</th>
                                <th>–î—ñ—ó</th>
                            </tr>
                        </thead>
                        <tbody id="orders-list">
                            <tr>
                                <td colspan="7" style="text-align: center; color: #666; padding: 40px;">
                                    üìã –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑'—è–≤–ª—è—Ç—å—Å—è —Ç—É—Ç –ø—ñ—Å–ª—è —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—ó CRM
                                </td>
                            </tr>
                        </tbody>
                    </table>
                </div>
                
                <!-- –ü—ñ–¥–ø–∏—Å–∫–∏ -->
                <div id="subscriptions-content" style="display: none;">
                    <h3>üíä –ü—ñ–¥–ø–∏—Å–∫–∏</h3>
                    <div id="subscriptions-list">–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...</div>
                </div>
                
                <!-- –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ -->
                <div id="users-content" style="display: none;">
                    <h3>üë• –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ</h3>
                    <div id="users-list">–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...</div>
                </div>
            </div>
        </div>
        
        <script>
            // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            fetch('/api/admin/stats')
                .then(response => response.json())
                .then(data => {
                    document.getElementById('users-count').textContent = data.total_users || 0;
                    document.getElementById('orders-count').textContent = data.total_orders || 0;
                    document.getElementById('subscriptions-count').textContent = data.active_subscriptions || 0;
                    document.getElementById('revenue-count').textContent = '$' + (data.total_revenue || 0).toFixed(2);
                })
                .catch(error => console.error('Error loading stats:', error));
            
            function showTab(tabName) {
                // –°—Ö–æ–≤–∞—Ç–∏ –≤—Å—ñ –∫–æ–Ω—Ç–µ–Ω—Ç–∏
                document.querySelectorAll('[id$="-content"]').forEach(el => el.style.display = 'none');
                
                // –ü–æ–∫–∞–∑–∞—Ç–∏ –æ–±—Ä–∞–Ω–∏–π
                document.getElementById(tabName + '-content').style.display = 'block';
                
                // –û–Ω–æ–≤–∏—Ç–∏ —Ç–∞–±–∏
                document.querySelectorAll('.tab').forEach(el => el.classList.remove('active'));
                event.target.classList.add('active');
            }
        </script>
    </body>
    </html>
    """
    return admin_html

@app.route('/<path:filename>')
def serve_static(filename):
    """–°—Ç–∞—Ç–∏—á–Ω—ñ —Ñ–∞–π–ª–∏"""
    return send_from_directory('.', filename)

# ==============================================
# TELEGRAM API ENDPOINTS
# ==============================================

@app.route("/api/telegram-login", methods=["POST"])
def telegram_login():
    """–û–±—Ä–æ–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó —á–µ—Ä–µ–∑ Telegram Login Widget"""
    try:
        data = request.get_json()
        telegram_user = data.get('telegram_user')
        source = data.get('source', 'widget')
        
        if not telegram_user:
            return jsonify({"error": "Telegram user data required"}), 400
        
        logger.info(f"üì± Telegram login: {telegram_user.get('id')} via {source}")
        
        # –í–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—è –¥–∞–Ω–∏—Ö (—Ç—ñ–ª—å–∫–∏ –¥–ª—è widget)
        if source == 'widget':
            if not verify_telegram_auth(telegram_user.copy()):
                logger.warning(f"‚ùå Invalid Telegram auth data for user {telegram_user.get('id')}")
                return jsonify({"error": "Invalid Telegram authentication"}), 401
        
        # –°—Ç–≤–æ—Ä–∏—Ç–∏ –∞–±–æ –æ–Ω–æ–≤–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ –±–∞–∑—ñ
        user_data = {
            "user_id": f"tg_{telegram_user['id']}",
            "telegram_id": telegram_user['id'],
            "first_name": telegram_user.get('first_name', ''),
            "last_name": telegram_user.get('last_name', ''),
            "username": telegram_user.get('username', ''),
            "photo_url": telegram_user.get('photo_url', ''),
            "auth_date": datetime.utcnow(),
            "source": source,
            "last_login": datetime.utcnow(),
            "active": True
        }
        
        # –ó–±–µ—Ä–µ–≥—Ç–∏ –≤ MongoDB
        safe_db_operation(
            "Save telegram user",
            lambda: users_collection.update_one(
                {"telegram_id": telegram_user['id']},
                {"$set": user_data},
                upsert=True
            ) if users_collection else None
        )
        
        return jsonify({
            "status": "success",
            "user_id": user_data["user_id"],
            "message": "Telegram authentication successful"
        })
        
    except Exception as e:
        logger.error(f"‚ùå Telegram login error: {str(e)}")
        return jsonify({"error": "Authentication failed"}), 500

@app.route("/api/telegram-user/<user_id>", methods=["GET"])
def get_telegram_user(user_id):
    """–û—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ Telegram –ø–æ ID"""
    try:
        # –ü–æ—à—É–∫ –≤ –±–∞–∑—ñ
        if users_collection:
            user = safe_db_operation(
                "Find telegram user",
                lambda: users_collection.find_one({"telegram_id": int(user_id)})
            )
            if user:
                user['_id'] = str(user['_id'])
                if 'auth_date' in user:
                    user['auth_date'] = user['auth_date'].isoformat()
                if 'last_login' in user:
                    user['last_login'] = user['last_login'].isoformat()
                return jsonify(user)
        
        return jsonify({"error": "User not found"}), 404
        
    except Exception as e:
        logger.error(f"‚ùå Error fetching Telegram user {user_id}: {e}")
        return jsonify({"error": "Failed to fetch user data"}), 500

# ==============================================
# SUBSCRIPTION PAYMENT API
# ==============================================

@app.route("/check-payment", methods=["POST"])
def check_payment():
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –Ω–∞–¥—ñ–π—à–ª–∞ –æ–ø–ª–∞—Ç–∞ –∑–∞ –ü–Ü–î–ü–ò–°–ö–£ (—Ç—ñ–ª—å–∫–∏ –ø—ñ–¥–ø–∏—Å–∫–∞)"""
    try:
        data = request.get_json()
        user_id = data.get("user_id")
        test_mode = data.get("test_mode", False)
        auto_check = data.get("auto_check", False)
        
        if not user_id:
            return jsonify({"error": "user_id –æ–±–æ–≤'—è–∑–∫–æ–≤–∏–π"}), 400
        
        logger.info(f"üîç Checking SUBSCRIPTION payment for user: {user_id}, test_mode: {test_mode}")
        
        # –í–∏–∑–Ω–∞—á–∞—î–º–æ –º—ñ–Ω—ñ–º–∞–ª—å–Ω—É —Å—É–º—É
        min_amount = MIN_AMOUNT_TEST if test_mode else MIN_AMOUNT
        
        # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        user = safe_db_operation(
            "Find user", 
            lambda: users_collection.find_one({"user_id": user_id}) if users_collection else None
        )
        
        if user is None:
            # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —è–∫—â–æ –Ω–µ —ñ—Å–Ω—É—î
            user_data = {
                "user_id": user_id,
                "created_at": datetime.utcnow(),
                "payment_completed": False
            }
            safe_db_operation(
                "Create user",
                lambda: users_collection.insert_one(user_data) if users_collection else None
            )
            user = user_data
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –≤–∂–µ —î –∞–∫—Ç–∏–≤–Ω–∞ –ø—ñ–¥–ø–∏—Å–∫–∞
        active_subscription = safe_db_operation(
            "Find active subscription",
            lambda: subscriptions_collection.find_one({
                "user_id": user_id,
                "expires_at": {"$gt": datetime.utcnow()},
                "active": True
            }) if subscriptions_collection else None
        )
        
        if active_subscription:
            days_left = (active_subscription["expires_at"] - datetime.utcnow()).days
            logger.info(f"‚úÖ Active subscription found for user {user_id}, days left: {days_left}")
            return jsonify({
                "access": "granted",
                "subscription": {
                    "expires_at": active_subscription["expires_at"].isoformat(),
                    "days_left": days_left
                }
            })
        
        # –®—É–∫–∞—î–º–æ –Ω–æ–≤—ñ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó –≤ TRON blockchain
        url = f"https://api.trongrid.io/v1/accounts/{TRON_WALLET}/transactions/trc20?limit=20"
        headers = {"accept": "application/json"}
        
        response = requests.get(url, headers=headers, timeout=15)
        response.raise_for_status()
        data_response = response.json()
        
        # –ß–∞—Å–æ–≤–∏–π –¥—ñ–∞–ø–∞–∑–æ–Ω –¥–ª—è –ø–æ—à—É–∫—É (–æ—Å—Ç–∞–Ω–Ω—ñ 60 —Ö–≤–∏–ª–∏–Ω)
        recent_time = datetime.utcnow() - timedelta(minutes=60)
        user_created_time = user.get("created_at", recent_time)
        search_from = max(recent_time, user_created_time)
        
        for tx in data_response.get("data", []):
            tx_id = tx.get("transaction_id")
            value = int(tx.get("value", "0")) / (10 ** 6)
            tx_timestamp = datetime.fromtimestamp(tx["block_timestamp"] / 1000)
            
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—è –≤–∂–µ –æ–±—Ä–æ–±–ª–µ–Ω–∞
            existing_tx = safe_db_operation(
                "Check existing transaction",
                lambda: transactions_collection.find_one({"tx_id": tx_id}) if transactions_collection else None
            )
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —É–º–æ–≤–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó
            if (value >= min_amount and 
                tx_timestamp > search_from and
                not existing_tx):
                
                logger.info(f"‚úÖ Found matching SUBSCRIPTION transaction: {value} USDT, tx_id: {tx_id}")
                
                # –ó–∞–ø–∏—Å—É—î–º–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é
                transaction_data = {
                    "tx_id": tx_id,
                    "user_id": user_id,
                    "amount": value,
                    "timestamp": tx_timestamp,
                    "processed": True,
                    "created_at": datetime.utcnow(),
                    "test_mode": test_mode,
                    "auto_detected": auto_check,
                    "type": "subscription"
                }
                
                safe_db_operation(
                    "Insert transaction",
                    lambda: transactions_collection.insert_one(transaction_data) if transactions_collection else None
                )
                
                # –°—Ç–≤–æ—Ä—é—î–º–æ –ø—ñ–¥–ø–∏—Å–∫—É
                expires_at = datetime.utcnow() + timedelta(days=SUBSCRIPTION_DAYS)
                subscription_data = {
                    "user_id": user_id,
                    "tx_id": tx_id,
                    "starts_at": datetime.utcnow(),
                    "expires_at": expires_at,
                    "active": True,
                    "created_at": datetime.utcnow(),
                    "test_mode": test_mode,
                    "auto_detected": auto_check
                }
                
                safe_db_operation(
                    "Insert subscription",
                    lambda: subscriptions_collection.insert_one(subscription_data) if subscriptions_collection else None
                )
                
                # –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
                safe_db_operation(
                    "Update user",
                    lambda: users_collection.update_one(
                        {"user_id": user_id},
                        {"$set": {"payment_completed": True, "last_payment_at": datetime.utcnow()}}
                    ) if users_collection else None
                )
                
                logger.info(f"‚úÖ Subscription created for user {user_id}")
                
                return jsonify({
                    "access": "granted",
                    "subscription": {
                        "expires_at": expires_at.isoformat(),
                        "days_left": SUBSCRIPTION_DAYS
                    },
                    "transaction": {
                        "amount": value,
                        "tx_id": tx_id
                    }
                })
        
        return jsonify({
            "access": "denied", 
            "message": f"–ü–ª–∞—Ç—ñ–∂ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π. –ù–∞–¥—ñ—à–ª—ñ—Ç—å {min_amount} USDT —ñ —Å–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –∫—ñ–ª—å–∫–∞ —Ö–≤–∏–ª–∏–Ω."
        })
        
    except requests.RequestException as e:
        logger.error(f"üö® TRON API error: {str(e)}")
        return jsonify({"error": f"–ü–æ–º–∏–ª–∫–∞ –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ TRON API: {str(e)}"}), 500
    except Exception as e:
        logger.error(f"üö® General error in check_payment: {str(e)}")
        return jsonify({"error": f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ –ø–ª–∞—Ç–µ–∂—É: {str(e)}"}), 500

# ==============================================
# SUPPLEMENTS PAYMENT API - –ù–û–í–ò–ô
# ==============================================

@app.route("/check-supplements-payment", methods=["POST"])
def check_supplements_payment():
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –Ω–∞–¥—ñ–π—à–ª–∞ –æ–ø–ª–∞—Ç–∞ –∑–∞ –ë–ê–î–∏ (—Ç—ñ–ª—å–∫–∏ –ë–ê–î–∏)"""
    try:
        data = request.get_json()
        user_id = data.get("user_id")
        order_id = data.get("order_id")
        expected_amount = data.get("expected_amount", 0)
        
        if not user_id or not order_id:
            return jsonify({"error": "user_id —Ç–∞ order_id –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ"}), 400
        
        logger.info(f"üîç Checking SUPPLEMENTS payment for order: {order_id}, amount: ${expected_amount}")
        
        # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
        order = safe_db_operation(
            "Find order", 
            lambda: orders_collection.find_one({"order_id": order_id}) if orders_collection else None
        )
        
        if not order:
            return jsonify({"error": "–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"}), 404
            
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –≤–∂–µ –æ–ø–ª–∞—á–µ–Ω–æ
        if order.get("payment_status") == "paid":
            logger.info(f"‚úÖ Order {order_id} already paid")
            return jsonify({
                "access": "granted",
                "message": "–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤–∂–µ –æ–ø–ª–∞—á–µ–Ω–æ",
                "order": {
                    "order_id": order_id,
                    "status": "paid",
                    "paid_at": order.get("paid_at", "").isoformat() if order.get("paid_at") else ""
                }
            })
        
        # –®—É–∫–∞—î–º–æ –Ω–æ–≤—ñ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó –≤ TRON blockchain
        url = f"https://api.trongrid.io/v1/accounts/{TRON_WALLET}/transactions/trc20?limit=20"
        headers = {"accept": "application/json"}
        
        response = requests.get(url, headers=headers, timeout=15)
        response.raise_for_status()
        data_response = response.json()
        
        # –ß–∞—Å–æ–≤–∏–π –¥—ñ–∞–ø–∞–∑–æ–Ω –¥–ª—è –ø–æ—à—É–∫—É (–∑ –º–æ–º–µ–Ω—Ç—É —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è)
        order_created = order.get("created_at", datetime.utcnow())
        search_from = order_created if isinstance(order_created, datetime) else datetime.fromisoformat(order_created.replace('Z', '+00:00'))
        
        for tx in data_response.get("data", []):
            tx_id = tx.get("transaction_id")
            value = int(tx.get("value", "0")) / (10 ** 6)
            tx_timestamp = datetime.fromtimestamp(tx["block_timestamp"] / 1000)
            
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—è –≤–∂–µ –æ–±—Ä–æ–±–ª–µ–Ω–∞
            existing_tx = safe_db_operation(
                "Check existing transaction",
                lambda: transactions_collection.find_one({"tx_id": tx_id}) if transactions_collection else None
            )
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —É–º–æ–≤–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó –¥–ª—è –ë–ê–î—ñ–≤
            if (abs(value - expected_amount) <= 0.1 and  # –î–æ–ø—É—Å–∫ ¬±0.1 USDT
                tx_timestamp > search_from and
                not existing_tx):
                
                logger.info(f"‚úÖ Found matching SUPPLEMENTS transaction: {value} USDT, tx_id: {tx_id}")
                
                # –ó–∞–ø–∏—Å—É—î–º–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é
                transaction_data = {
                    "tx_id": tx_id,
                    "user_id": user_id,
                    "order_id": order_id,
                    "amount": value,
                    "expected_amount": expected_amount,
                    "timestamp": tx_timestamp,
                    "processed": True,
                    "created_at": datetime.utcnow(),
                    "type": "supplements"
                }
                
                safe_db_operation(
                    "Insert supplements transaction",
                    lambda: transactions_collection.insert_one(transaction_data) if transactions_collection else None
                )
                
                # –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
                safe_db_operation(
                    "Update order status",
                    lambda: orders_collection.update_one(
                        {"order_id": order_id},
                        {"$set": {
                            "payment_status": "paid",
                            "paid_at": datetime.utcnow(),
                            "tx_id": tx_id,
                            "paid_amount": value,
                            "updated_at": datetime.utcnow()
                        }}
                    ) if orders_collection else None
                )
                
                logger.info(f"‚úÖ Supplements order {order_id} marked as paid")
                
                # TODO: –í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ TG —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –º–µ–Ω–µ–¥–∂–µ—Ä—É (–∑–∞–≥–ª—É—à–∫–∞)
                # send_telegram_notification_to_manager(order, transaction_data)
                
                return jsonify({
                    "access": "granted",
                    "message": "–û–ø–ª–∞—Ç–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–∞! –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –æ–±—Ä–æ–±–ª–µ–Ω–µ.",
                    "order": {
                        "order_id": order_id,
                        "status": "paid",
                        "paid_amount": value,
                        "tx_id": tx_id
                    }
                })
        
        return jsonify({
            "access": "denied", 
            "message": f"–ü–ª–∞—Ç—ñ–∂ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π. –ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ç–æ—á–Ω–æ ${expected_amount:.2f} USDT —ñ —Å–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –∫—ñ–ª—å–∫–∞ —Ö–≤–∏–ª–∏–Ω."
        })
        
    except requests.RequestException as e:
        logger.error(f"üö® TRON API error: {str(e)}")
        return jsonify({"error": f"–ü–æ–º–∏–ª–∫–∞ –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ TRON API: {str(e)}"}), 500
    except Exception as e:
        logger.error(f"üö® General error in check_supplements_payment: {str(e)}")
        return jsonify({"error": f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ –ø–ª–∞—Ç–µ–∂—É –ë–ê–î—ñ–≤: {str(e)}"}), 500

@app.route("/subscription-status", methods=["POST"])
def subscription_status():
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—Ç–∞—Ç—É—Å –ø—ñ–¥–ø–∏—Å–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    try:
        data = request.get_json()
        user_id = data.get("user_id")
        
        if not user_id:
            return jsonify({"error": "user_id –æ–±–æ–≤'—è–∑–∫–æ–≤–∏–π"}), 400
        
        # –®—É–∫–∞—î–º–æ –∞–∫—Ç–∏–≤–Ω—É –ø—ñ–¥–ø–∏—Å–∫—É
        subscription = safe_db_operation(
            "Find subscription",
            lambda: subscriptions_collection.find_one({
                "user_id": user_id,
                "expires_at": {"$gt": datetime.utcnow()},
                "active": True
            }) if subscriptions_collection else None
        )
        
        if subscription:
            days_left = (subscription["expires_at"] - datetime.utcnow()).days
            return jsonify({
                "has_subscription": True,
                "expires_at": subscription["expires_at"].isoformat(),
                "days_left": days_left,
                "active": True
            })
        else:
            return jsonify({
                "has_subscription": False,
                "active": False
            })
    
    except Exception as e:
        logger.error(f"üö® Error in subscription_status: {str(e)}")
        return jsonify({"error": f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ —Å—Ç–∞—Ç—É—Å—É –ø—ñ–¥–ø–∏—Å–∫–∏: {str(e)}"}), 500

# ==============================================
# SHOP / ORDERS API
# ==============================================

@app.route("/api/products", methods=["GET"])
def get_products():
    """–û—Ç—Ä–∏–º–∞—Ç–∏ –∫–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä—ñ–≤ –∑ –æ–Ω–æ–≤–ª–µ–Ω–∏–º–∏ —Ü—ñ–Ω–∞–º–∏"""
    try:
        return jsonify({
            "status": "success",
            "products": SHOP_PRODUCTS
        })
    except Exception as e:
        logger.error(f"‚ùå Get products error: {str(e)}")
        return jsonify({"error": "Failed to get products"}), 500

@app.route("/api/create-order", methods=["POST"])
def create_order():
    """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –ë–ê–î—ñ–≤"""
    try:
        data = request.get_json()
        
        if not data:
            return jsonify({"error": "Order data required"}), 400
        
        # –í–∞–ª—ñ–¥–∞—Ü—ñ—è –æ–±–æ–≤'—è–∑–∫–æ–≤–∏—Ö –ø–æ–ª—ñ–≤
        required_fields = ['user_id', 'items', 'total_amount', 'order_info']
        for field in required_fields:
            if field not in data:
                return jsonify({"error": f"Missing required field: {field}"}), 400
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó
        order_info = data.get('order_info', {})
        if not order_info.get('phone') or not order_info.get('city'):
            return jsonify({"error": "Phone and city are required"}), 400
        
        # –ì–µ–Ω–µ—Ä—É—î–º–æ —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π ID –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
        order_id = generate_order_id(data.get('user_id'))
        
        # –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–∏—Ö –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
        order_data = {
            "order_id": order_id,
            "user_id": data.get('user_id'),
            "telegram_user": data.get('telegram_user'),
            "items": data.get('items', []),
            "total_amount": float(data.get('total_amount', 0)),
            "order_info": {
                "first_name": order_info.get('first_name'),
                "last_name": order_info.get('last_name'),
                "phone": order_info.get('phone'),
                "city": order_info.get('city'),
                "warehouse": order_info.get('warehouse'),
                "comment": order_info.get('comment', '')
            },
            "status": "pending",
            "payment_status": "pending",  # pending -> paid -> shipped -> delivered
            "payment_method": data.get('payment_method', 'usdt_crypto'),
            "created_at": datetime.utcnow(),
            "updated_at": datetime.utcnow(),
            "source": data.get('source', 'shop')
        }
        
        logger.info(f"üì¶ Creating supplements order {order_id} for user {data.get('user_id')}")
        
        # –ó–±–µ—Ä–µ–≥—Ç–∏ –≤ MongoDB
        result = safe_db_operation(
            "Insert supplements order",
            lambda: orders_collection.insert_one(order_data) if orders_collection else None
        )
        
        if result:
            logger.info(f"‚úÖ Supplements order {order_id} created successfully")
            return jsonify({
                "status": "created",
                "order_id": order_id,
                "message": "Order created successfully"
            })
        else:
            logger.error(f"‚ùå Failed to save supplements order {order_id}")
            return jsonify({"error": "Failed to save order"}), 500
        
    except Exception as e:
        logger.error(f"‚ùå Create supplements order error: {str(e)}")
        return jsonify({"error": f"Failed to create order: {str(e)}"}), 500

@app.route("/api/order/<order_id>", methods=["GET"])
def get_order(order_id):
    """–û—Ç—Ä–∏–º–∞—Ç–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è"""
    try:
        if not orders_collection:
            return jsonify({"error": "Database not available"}), 500
        
        order = safe_db_operation(
            "Find order",
            lambda: orders_collection.find_one({"order_id": order_id})
        )
        
        if order:
            order['_id'] = str(order['_id'])
            if 'created_at' in order:
                order['created_at'] = order['created_at'].isoformat()
            if 'updated_at' in order:
                order['updated_at'] = order['updated_at'].isoformat()
            if 'paid_at' in order and order['paid_at']:
                order['paid_at'] = order['paid_at'].isoformat()
            
            return jsonify({
                "status": "success",
                "order": order
            })
        else:
            return jsonify({"error": "Order not found"}), 404
        
    except Exception as e:
        logger.error(f"‚ùå Get order error: {str(e)}")
        return jsonify({"error": "Failed to get order"}), 500

# ==============================================
# ADMIN API
# ==============================================

@app.route("/api/admin/stats", methods=["GET"])
def admin_stats():
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –∞–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—ñ"""
    try:
        # –ü—ñ–¥—Ä–∞—Ö—É–Ω–∫–∏ –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
        total_users = 0
        total_orders = 0
        total_revenue = 0
        active_subscriptions = 0
        
        if db:
            # –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ
            total_users = safe_db_operation(
                "Count users",
                lambda: users_collection.count_documents({}) if users_collection else 0
            ) or 0
            
            # –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –ë–ê–î—ñ–≤
            total_orders = safe_db_operation(
                "Count orders",
                lambda: orders_collection.count_documents({}) if orders_collection else 0
            ) or 0
            
            # –î–æ—Ö—ñ–¥ –∑ –∑–∞–º–æ–≤–ª–µ–Ω—å –ë–ê–î—ñ–≤ (—Ç—ñ–ª—å–∫–∏ –æ–ø–ª–∞—á–µ–Ω—ñ)
            revenue_pipeline = [
                {"$match": {"payment_status": "paid"}},
                {"$group": {"_id": None, "total": {"$sum": "$total_amount"}}}
            ]
            revenue_result = safe_db_operation(
                "Calculate supplements revenue",
                lambda: list(orders_collection.aggregate(revenue_pipeline)) if orders_collection else []
            )
            if revenue_result and len(revenue_result) > 0:
                total_revenue = revenue_result[0].get('total', 0)
            
            # –î–æ—Ö—ñ–¥ –∑ –ø—ñ–¥–ø–∏—Å–æ–∫
            subscription_revenue = safe_db_operation(
                "Count subscriptions",
                lambda: subscriptions_collection.count_documents({}) if subscriptions_collection else 0
            ) or 0
            total_revenue += subscription_revenue * MIN_AMOUNT
            
            # –ê–∫—Ç–∏–≤–Ω—ñ –ø—ñ–¥–ø–∏—Å–∫–∏
            active_subscriptions = safe_db_operation(
                "Count active subscriptions",
                lambda: subscriptions_collection.count_documents({
                    "expires_at": {"$gt": datetime.utcnow()},
                    "active": True
                }) if subscriptions_collection else 0
            ) or 0
        
        return jsonify({
            "total_users": total_users,
            "total_orders": total_orders,
            "total_revenue": total_revenue,
            "active_subscriptions": active_subscriptions
        })
        
    except Exception as e:
        logger.error(f"Admin stats error: {e}")
        return jsonify({"error": "Stats calculation failed"}), 500

# ==============================================
# CRM –ó–ê–ì–õ–£–®–ö–ò (–î–õ–Ø –ú–ê–ô–ë–£–¢–ù–¨–û–á –†–ï–ê–õ–Ü–ó–ê–¶–Ü–á)
# ==============================================

@app.route("/api/admin/orders", methods=["GET"])
def admin_get_orders():
    """CRM: –û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –ë–ê–î—ñ–≤ (–∑–∞–≥–ª—É—à–∫–∞)"""
    try:
        # TODO: –†–µ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –ø–æ–≤–Ω–∏–π CRM —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª
        if not orders_collection:
            return jsonify({"orders": []})
        
        orders = safe_db_operation(
            "Get all orders",
            lambda: list(orders_collection.find({}).sort("created_at", -1).limit(50))
        )
        
        if orders:
            for order in orders:
                order['_id'] = str(order['_id'])
                if 'created_at' in order:
                    order['created_at'] = order['created_at'].isoformat()
                if 'updated_at' in order:
                    order['updated_at'] = order['updated_at'].isoformat()
                if 'paid_at' in order and order['paid_at']:
                    order['paid_at'] = order['paid_at'].isoformat()
        
        return jsonify({"orders": orders or []})
        
    except Exception as e:
        logger.error(f"Admin get orders error: {e}")
        return jsonify({"error": "Failed to get orders"}), 500

@app.route("/api/admin/order/<order_id>/status", methods=["PUT"])
def admin_update_order_status(order_id):
    """CRM: –û–Ω–æ–≤–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è (–∑–∞–≥–ª—É—à–∫–∞)"""
    try:
        data = request.get_json()
        new_status = data.get('status')
        
        if not new_status:
            return jsonify({"error": "Status required"}), 400
        
        # TODO: –í–∞–ª—ñ–¥–∞—Ü—ñ—è —Å—Ç–∞—Ç—É—Å—ñ–≤: pending, paid, shipped, delivered, cancelled
        
        result = safe_db_operation(
            "Update order status",
            lambda: orders_collection.update_one(
                {"order_id": order_id},
                {"$set": {
                    "status": new_status,
                    "updated_at": datetime.utcnow()
                }}
            ) if orders_collection else None
        )
        
        if result and result.matched_count > 0:
            logger.info(f"‚úÖ Order {order_id} status updated to {new_status}")
            return jsonify({"status": "success", "message": "Status updated"})
        else:
            return jsonify({"error": "Order not found"}), 404
            
    except Exception as e:
        logger.error(f"Admin update order status error: {e}")
        return jsonify({"error": "Failed to update status"}), 500

# def send_telegram_notification_to_manager(order, transaction):
#     """–í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ TG —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –º–µ–Ω–µ–¥–∂–µ—Ä—É –ø—Ä–æ –Ω–æ–≤–µ –æ–ø–ª–∞—á–µ–Ω–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è (–∑–∞–≥–ª—É—à–∫–∞)"""
#     # TODO: –†–µ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ TG —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞
#     logger.info(f"üì± TG notification (stub): New paid order {order.get('order_id')}")
#     pass

# ==============================================
# UTILITY ENDPOINTS
# ==============================================

@app.route("/debug-tron", methods=["GET"])
def debug_tron():
    """Debug endpoint –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ TRON API"""
    try:
        url = f"https://api.trongrid.io/v1/accounts/{TRON_WALLET}/transactions/trc20?limit=5"
        headers = {"accept": "application/json"}
        
        response = requests.get(url, headers=headers, timeout=15)
        response.raise_for_status()
        data = response.json()
        
        # –§–æ—Ä–º–∞—Ç—É—î–º–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó
        formatted_transactions = []
        recent_time = datetime.utcnow() - timedelta(minutes=60)
        
        for tx in data.get("data", []):
            amount = int(tx.get("value", "0")) / (10 ** 6)
            timestamp = datetime.fromtimestamp(tx["block_timestamp"] / 1000)
            is_recent = timestamp > recent_time
            formatted_transactions.append({
                "amount": amount,
                "timestamp": timestamp.isoformat(),
                "tx_id": tx.get("transaction_id", "")[:16] + "...",
                "is_recent": is_recent,
                "matches_subscription": amount >= MIN_AMOUNT and is_recent,
                "matches_supplements": 0.5 <= amount <= 5.0 and is_recent
            })
        
        return jsonify({
            "status": "ok",
            "wallet": TRON_WALLET,
            "transactions_count": len(formatted_transactions),
            "transactions": formatted_transactions,
            "min_amount_subscription": MIN_AMOUNT,
            "min_amount_test": MIN_AMOUNT_TEST,
            "supplements_range": "0.5-5.0 USDT",
            "search_from": recent_time.isoformat()
        })
        
    except Exception as e:
        return jsonify({
            "status": "error",
            "error": str(e),
            "wallet": TRON_WALLET
        }), 500

@app.route("/health", methods=["GET"])
def health():
    """Health check endpoint"""
    mongodb_status = "connected" if db is not None else "disconnected"
    
    # –¢–µ—Å—Ç—É—î–º–æ MongoDB
    mongodb_test = False
    if db is not None:
        try:
            db.list_collection_names()
            mongodb_test = True
        except Exception as e:
            logger.error(f"MongoDB health check failed: {e}")
            mongodb_test = False
    
    return jsonify({
        "status": "ok", 
        "version": "PANTELMED_UNIFIED_PLATFORM_2024_v2",
        "timestamp": datetime.utcnow().isoformat(),
        "mongodb": {
            "status": mongodb_status,
            "connection_test": mongodb_test,
            "uri": MONGO_URI.replace("manreds7", "***") if MONGO_URI else "not set"
        },
        "tron_wallet": TRON_WALLET,
        "telegram_bot": TELEGRAM_BOT_USERNAME,
        "shop_products": len(SHOP_PRODUCTS),
        "api_url": "https://pantelmed-api.onrender.com",
        "new_features": [
            "–û–Ω–æ–≤–ª–µ–Ω—ñ —Ü—ñ–Ω–∏ –ë–ê–î—ñ–≤ (0.7-0.9 USD)",
            "–û–∫—Ä–µ–º–∏–π endpoint –¥–ª—è –ë–ê–î—ñ–≤: /check-supplements-payment",
            "CRM –∑–∞–≥–ª—É—à–∫–∏ –≤ –∞–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—ñ",
            "–£–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ –æ–ø–ª–∞—Ç–∏"
        ]
    })

# ==============================================
# –Ü–ù–Ü–¶–Ü–ê–õ–Ü–ó–ê–¶–Ü–Ø –¢–ê –ó–ê–ü–£–°–ö
# ==============================================

if __name__ == "__main__":
    logger.info("üöÄ Starting PantelMed Unified Platform v2...")
    logger.info(f"üìÅ Working directory: {os.getcwd()}")
    
    port = int(os.environ.get("PORT", 10000))
    logger.info(f"üì° Server will run on port: {port}")
    logger.info(f"üíæ MongoDB: {'Connected' if db else 'Disconnected'}")
    logger.info(f"üîó TRON Wallet: {TRON_WALLET}")
    logger.info(f"ü§ñ Telegram Bot: @{TELEGRAM_BOT_USERNAME}")
    logger.info(f"üõí Shop Products: {len(SHOP_PRODUCTS)} items (NEW PRICES: $0.7-0.9)")
    logger.info(f"üåê API URL: https://pantelmed-api.onrender.com")
    logger.info("üÜï NEW: Separate supplements payment endpoint + CRM stubs")
    
    try:
        app.run(host="0.0.0.0", port=port, debug=False)
    except Exception as e:
        logger.error(f"‚ùå Server failed to start: {e}")
        raise
