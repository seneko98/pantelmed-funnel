# PantelMed - –ü–æ–≤–Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –∑ Telegram —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—î—é, –ø–ª–∞—Ç–µ–∂–∞–º–∏ —Ç–∞ –∞–¥–º—ñ–Ω –ø–∞–Ω–µ–ª–ª—é
# app.py

from flask import Flask, jsonify, request, send_from_directory, render_template_string
from flask_cors import CORS
import requests
from datetime import datetime, timedelta
from pymongo import MongoClient
from pymongo.errors import ConnectionFailure, OperationFailure, ServerSelectionTimeoutError
import hashlib
import hmac
import json
import os
import threading
import time
from dataclasses import dataclass
from typing import Dict, Optional
import logging

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

app = Flask(__name__)
CORS(app)  # –î–æ–∑–≤–æ–ª—è—î–º–æ CORS –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥—É

# ==============================================
# –ö–û–ù–§–Ü–ì–£–†–ê–¶–Ü–Ø
# ==============================================

# TRON Wallet Configuration
TRON_WALLET = "TQeHa8VdwfyybxtioW4ggbnDC1rbWe8nFa"
MIN_AMOUNT = 2.6
MIN_AMOUNT_TEST = 0.5
SUBSCRIPTION_DAYS = 30

# Telegram Bot Configuration
TELEGRAM_BOT_TOKEN = "8116552220:AAHiOZdROOQKtj09ZDvLRYZw2FNKPQrmMV4"
TELEGRAM_BOT_USERNAME = "pantelmed_bot"
ADMIN_TELEGRAM_ID = "YOUR_ADMIN_ID"  # –ó–∞–º—ñ–Ω–∏—Ç–∏ –Ω–∞ –≤–∞—à Telegram ID

# MongoDB Configuration
MONGO_URI = "mongodb+srv://Vlad:manreds7@cluster0.d0qnz.mongodb.net/pantelmed?retryWrites=true&w=majority&appName=Cluster0"

# Onramper Configuration
ONRAMPER_TEST_KEY = "pk_test_01JY2KESE1BJG8PP886XHG2EWG"
ONRAMPER_WEBHOOK_SECRET = "your_webhook_secret_here"

# Admin Panel Password
ADMIN_PASSWORD = "pantelmed_admin_2024"

# ==============================================
# MONGODB –Ü–ù–Ü–¶–Ü–ê–õ–Ü–ó–ê–¶–Ü–Ø
# ==============================================

def init_mongodb():
    """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è MongoDB –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è"""
    try:
        logger.info("üîó Connecting to MongoDB...")
        
        client = MongoClient(
            MONGO_URI,
            serverSelectionTimeoutMS=10000,
            connectTimeoutMS=15000,
            socketTimeoutMS=20000
        )
        
        # –¢–µ—Å—Ç—É—î–º–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
        client.admin.command('ping')
        logger.info("‚úÖ MongoDB connection successful!")
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –±–∞–∑—É –¥–∞–Ω–∏—Ö
        db = client["pantelmed"]
        
        # –¢–µ—Å—Ç—É—î–º–æ –¥–æ—Å—Ç—É–ø
        try:
            collections = db.list_collection_names()
            logger.info(f"‚úÖ Database access successful! Collections: {collections}")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Collection list failed but connection works: {e}")
        
        return client, db
        
    except Exception as e:
        logger.error(f"‚ùå MongoDB connection failed: {e}")
        return None, None

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è MongoDB
logger.info("üöÄ Initializing MongoDB connection...")
mongo_client, db = init_mongodb()

if mongo_client is None or db is None:
    logger.critical("üö® CRITICAL: MongoDB connection failed!")
    users_collection = None
    transactions_collection = None
    subscriptions_collection = None
    orders_collection = None
    onramper_transactions = {}
else:
    logger.info("‚úÖ MongoDB ready for use!")
    # –ö–æ–ª–µ–∫—Ü—ñ—ó MongoDB
    users_collection = db["users"]
    transactions_collection = db["transactions"] 
    subscriptions_collection = db["subscriptions"]
    orders_collection = db["orders"]
    onramper_transactions = {}

# ==============================================
# –î–û–ü–û–ú–Ü–ñ–ù–Ü –§–£–ù–ö–¶–Ü–á
# ==============================================

def safe_db_operation(operation_name, operation_func):
    """–ë–µ–∑–ø–µ—á–Ω–µ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –æ–ø–µ—Ä–∞—Ü—ñ–π –∑ –±–∞–∑–æ—é –¥–∞–Ω–∏—Ö"""
    try:
        if db is None:
            logger.error(f"‚ùå {operation_name}: Database not connected")
            return None
        return operation_func()
    except Exception as e:
        logger.error(f"‚ùå {operation_name} failed: {e}")
        return None

def generate_payment_id(user_id):
    """–ì–µ–Ω–µ—Ä—É—î–º–æ —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π ID –¥–ª—è –ø–ª–∞—Ç–µ–∂—É"""
    return hashlib.md5(f"{user_id}_{datetime.utcnow().isoformat()}".encode()).hexdigest()[:12]

def verify_telegram_auth(auth_data):
    """–í–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—è –∞–≤—Ç–µ–Ω—Ç–∏—á–Ω–æ—Å—Ç—ñ –¥–∞–Ω–∏—Ö –≤—ñ–¥ Telegram Login Widget"""
    check_hash = auth_data.pop('hash', None)
    if not check_hash:
        return False
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ —Ä—è–¥–æ–∫ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
    data_check_arr = []
    for key, value in sorted(auth_data.items()):
        data_check_arr.append(f"{key}={value}")
    data_check_string = '\n'.join(data_check_arr)
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ —Å–µ–∫—Ä–µ—Ç–Ω–∏–π –∫–ª—é—á
    secret_key = hashlib.sha256(TELEGRAM_BOT_TOKEN.encode()).digest()
    
    # –ì–µ–Ω–µ—Ä—É—î–º–æ —Ö–µ—à
    calculated_hash = hmac.new(
        secret_key,
        data_check_string.encode(),
        hashlib.sha256
    ).hexdigest()
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∑–±—ñ–≥
    return hmac.compare_digest(calculated_hash, check_hash)

# ==============================================
# –ê–í–¢–û–ú–ê–¢–ò–ó–ê–¶–Ü–Ø –ü–õ–ê–¢–ï–ñ–Ü–í
# ==============================================

@dataclass
class PendingPayment:
    user_id: str
    created_at: datetime
    amount_expected: float
    last_check: Optional[datetime] = None
    check_count: int = 0

class PaymentMonitor:
    def __init__(self, db_instance, tron_wallet):
        self.db = db_instance
        self.wallet = tron_wallet
        self.running = False
        self.pending_payments = {}
        
    def start_monitoring(self):
        """–ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–≥–æ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É"""
        if self.running:
            return
        self.running = True
        threading.Thread(target=self._monitor_loop, daemon=True).start()
        logger.info("üîÑ Payment monitoring started")
        
    def add_pending_payment(self, user_id: str, amount: float):
        """–î–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –æ—á—ñ–∫—É—é—á–æ–≥–æ –ø–ª–∞—Ç–µ–∂—É"""
        self.pending_payments[user_id] = PendingPayment(
            user_id=user_id,
            created_at=datetime.utcnow(),
            amount_expected=amount
        )
        logger.info(f"‚ûï Added pending payment: {user_id} - {amount} USDT")
        
    def remove_pending_payment(self, user_id: str):
        """–í–∏–¥–∞–ª–µ–Ω–Ω—è –ø–ª–∞—Ç–µ–∂—É –∑—ñ —Å–ø–∏—Å–∫—É –æ—á—ñ–∫—É—é—á–∏—Ö"""
        if user_id in self.pending_payments:
            del self.pending_payments[user_id]
            logger.info(f"‚ûñ Removed pending payment: {user_id}")
            
    def _monitor_loop(self):
        """–ì–æ–ª–æ–≤–Ω–∏–π —Ü–∏–∫–ª –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É"""
        while self.running:
            try:
                self._check_all_pending_payments()
                self._cleanup_old_payments()
                time.sleep(30)  # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ–∂–Ω—ñ 30 —Å–µ–∫—É–Ω–¥
            except Exception as e:
                logger.error(f"‚ùå Monitor error: {e}")
                time.sleep(60)  # –ü—Ä–∏ –ø–æ–º–∏–ª—Ü—ñ —á–µ–∫–∞—î–º–æ –¥–æ–≤—à–µ
                
    def _check_all_pending_payments(self):
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤—Å—ñ—Ö –æ—á—ñ–∫—É—é—á–∏—Ö –ø–ª–∞—Ç–µ–∂—ñ–≤"""
        if not self.pending_payments:
            return
        logger.info(f"üîç Checking {len(self.pending_payments)} pending payments...")
        
        for user_id, payment in list(self.pending_payments.items()):
            try:
                self._check_single_payment(payment)
            except Exception as e:
                logger.error(f"‚ùå Error checking payment for {user_id}: {e}")
                
    def _check_single_payment(self, payment: PendingPayment):
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –æ–¥–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂—É"""
        payment.check_count += 1
        payment.last_check = datetime.utcnow()
        
        url = f"https://api.trongrid.io/v1/accounts/{self.wallet}/transactions/trc20?limit=20"
        headers = {"accept": "application/json"}
        
        try:
            response = requests.get(url, headers=headers, timeout=10)
            response.raise_for_status()
            data = response.json()
            
            # –ü–æ—à—É–∫ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ—ó —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó
            recent_time = payment.created_at - timedelta(minutes=10)
            
            for tx in data.get("data", []):
                tx_id = tx.get("transaction_id")
                value = int(tx.get("value", "0")) / (10 ** 6)
                tx_timestamp = datetime.fromtimestamp(tx["block_timestamp"] / 1000)
                
                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —É–º–æ–≤–∏
                if (value >= payment.amount_expected and 
                    tx_timestamp > recent_time and
                    not self._is_transaction_processed(tx_id)):
                    
                    # –ó–Ω–∞–π–¥–µ–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—è
                    self._process_found_payment(payment.user_id, tx_id, value, tx_timestamp)
                    return True
                    
        except Exception as e:
            logger.error(f"‚ùå TRON API error for {payment.user_id}: {e}")
        return False
        
    def _process_found_payment(self, user_id: str, tx_id: str, amount: float, timestamp: datetime):
        """–û–±—Ä–æ–±–∫–∞ –∑–Ω–∞–π–¥–µ–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂—É"""
        try:
            # –ó–∞–ø–∏—Å—É—î–º–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é
            transaction_data = {
                "tx_id": tx_id,
                "user_id": user_id,
                "amount": amount,
                "timestamp": timestamp,
                "processed": True,
                "created_at": datetime.utcnow(),
                "auto_detected": True
            }
            
            safe_db_operation(
                "Insert auto transaction",
                lambda: transactions_collection.insert_one(transaction_data) if transactions_collection else None
            )
            
            # –°—Ç–≤–æ—Ä—é—î–º–æ –ø—ñ–¥–ø–∏—Å–∫—É
            expires_at = datetime.utcnow() + timedelta(days=SUBSCRIPTION_DAYS)
            subscription_data = {
                "user_id": user_id,
                "tx_id": tx_id,
                "starts_at": datetime.utcnow(),
                "expires_at": expires_at,
                "active": True,
                "created_at": datetime.utcnow(),
                "auto_detected": True
            }
            
            safe_db_operation(
                "Insert auto subscription",
                lambda: subscriptions_collection.insert_one(subscription_data) if subscriptions_collection else None
            )
            
            # –û–Ω–æ–≤–ª—é—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            safe_db_operation(
                "Update user auto",
                lambda: users_collection.update_one(
                    {"user_id": user_id},
                    {"$set": {"payment_completed": True, "last_payment_at": datetime.utcnow()}}
                ) if users_collection else None
            )
            
            self.remove_pending_payment(user_id)
            logger.info(f"‚úÖ Auto-processed payment: {user_id} - {amount} USDT")
            
        except Exception as e:
            logger.error(f"‚ùå Error processing payment for {user_id}: {e}")
            
    def _is_transaction_processed(self, tx_id: str) -> bool:
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—è –≤–∂–µ –æ–±—Ä–æ–±–ª–µ–Ω–∞"""
        if not transactions_collection:
            return False
        result = safe_db_operation(
            "Check processed transaction",
            lambda: transactions_collection.find_one({"tx_id": tx_id})
        )
        return result is not None
        
    def _cleanup_old_payments(self):
        """–û—á–∏—â–µ–Ω–Ω—è —Å—Ç–∞—Ä–∏—Ö –ø–ª–∞—Ç–µ–∂—ñ–≤ (—Å—Ç–∞—Ä—à–µ 24 –≥–æ–¥–∏–Ω)"""
        cutoff_time = datetime.utcnow() - timedelta(hours=24)
        for user_id, payment in list(self.pending_payments.items()):
            if payment.created_at < cutoff_time:
                self.remove_pending_payment(user_id)

# –ì–ª–æ–±–∞–ª—å–Ω–∏–π –µ–∫–∑–µ–º–ø–ª—è—Ä –º–æ–Ω—ñ—Ç–æ—Ä–∞
payment_monitor = None

def init_payment_monitor():
    """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –º–æ–Ω—ñ—Ç–æ—Ä–∞"""
    global payment_monitor
    if payment_monitor is None and db is not None:
        payment_monitor = PaymentMonitor(db, TRON_WALLET)
        payment_monitor.start_monitoring()

# ==============================================
# ADMIN PANEL HTML
# ==============================================

ADMIN_PANEL_HTML = """
<!DOCTYPE html>
<html lang="uk">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>üìä –ê–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—å - PantelMed</title>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <style>
        * { margin: 0; padding: 0; box-sizing: border-box; }
        
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: #f8f9fa;
            color: #333;
        }
        
        .header {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 20px;
            text-align: center;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }
        
        .container {
            max-width: 1400px;
            margin: 0 auto;
            padding: 20px;
        }
        
        .login-section {
            max-width: 400px;
            margin: 100px auto;
            background: white;
            padding: 40px;
            border-radius: 15px;
            box-shadow: 0 10px 30px rgba(0,0,0,0.1);
            text-align: center;
        }
        
        .login-section h2 {
            margin-bottom: 30px;
            color: #333;
        }
        
        .login-section input {
            width: 100%;
            padding: 15px;
            margin: 10px 0;
            border: 2px solid #e0e0e0;
            border-radius: 8px;
            font-size: 16px;
        }
        
        .login-section button {
            width: 100%;
            padding: 15px;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            border: none;
            border-radius: 8px;
            font-size: 16px;
            cursor: pointer;
            margin-top: 20px;
        }
        
        .dashboard-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }
        
        .stat-card {
            background: white;
            padding: 25px;
            border-radius: 15px;
            box-shadow: 0 5px 15px rgba(0,0,0,0.1);
            border-left: 4px solid;
            transition: transform 0.2s;
        }
        
        .stat-card:hover {
            transform: translateY(-2px);
        }
        
        .stat-card.revenue { border-left-color: #28a745; }
        .stat-card.users { border-left-color: #007bff; }
        .stat-card.conversion { border-left-color: #ffc107; }
        .stat-card.active { border-left-color: #17a2b8; }
        
        .stat-number {
            font-size: 2.5em;
            font-weight: bold;
            margin: 10px 0;
        }
        
        .stat-label {
            color: #666;
            font-size: 0.9em;
            text-transform: uppercase;
            letter-spacing: 1px;
        }
        
        .section {
            background: white;
            margin: 20px 0;
            border-radius: 15px;
            overflow: hidden;
            box-shadow: 0 5px 15px rgba(0,0,0,0.1);
        }
        
        .section-header {
            background: #f8f9fa;
            padding: 20px;
            border-bottom: 1px solid #e9ecef;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        
        .section-title {
            font-size: 1.3em;
            font-weight: 600;
        }
        
        .btn {
            padding: 8px 16px;
            border: none;
            border-radius: 6px;
            cursor: pointer;
            font-size: 0.9em;
            transition: background-color 0.2s;
        }
        
        .btn-primary { background: #007bff; color: white; }
        .btn-success { background: #28a745; color: white; }
        .btn-warning { background: #ffc107; color: white; }
        .btn-danger { background: #dc3545; color: white; }
        
        .table {
            width: 100%;
            border-collapse: collapse;
        }
        
        .table th, .table td {
            padding: 12px;
            text-align: left;
            border-bottom: 1px solid #e9ecef;
        }
        
        .table th {
            background: #f8f9fa;
            font-weight: 600;
        }
        
        .table tbody tr:hover {
            background: #f8f9fa;
        }
        
        .status-badge {
            padding: 4px 8px;
            border-radius: 4px;
            font-size: 0.8em;
            font-weight: 600;
        }
        
        .status-active { background: #d4edda; color: #155724; }
        .status-pending { background: #fff3cd; color: #856404; }
        .status-failed { background: #f8d7da; color: #721c24; }
        
        .real-time-log {
            background: #1e1e1e;
            color: #00ff00;
            padding: 20px;
            border-radius: 10px;
            font-family: 'Courier New', monospace;
            font-size: 0.9em;
            height: 300px;
            overflow-y: auto;
        }
        
        .alert {
            padding: 15px;
            margin: 10px 0;
            border-radius: 8px;
            border-left: 4px solid;
        }
        
        .alert-info { background: #d1ecf1; border-left-color: #17a2b8; color: #0c5460; }
        .alert-warning { background: #fff3cd; border-left-color: #ffc107; color: #856404; }
        .alert-danger { background: #f8d7da; border-left-color: #dc3545; color: #721c24; }
        .alert-success { background: #d4edda; border-left-color: #28a745; color: #155724; }
        
        .hidden { display: none; }
        
        .logout-btn {
            position: absolute;
            top: 20px;
            right: 20px;
            background: rgba(255,255,255,0.2);
            color: white;
            border: 1px solid white;
            padding: 10px 20px;
            border-radius: 5px;
            cursor: pointer;
        }
        
        .refresh-indicator {
            display: inline-block;
            width: 12px;
            height: 12px;
            border: 2px solid #f3f3f3;
            border-top: 2px solid #007bff;
            border-radius: 50%;
            animation: spin 1s linear infinite;
            margin-left: 10px;
        }
        
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
    </style>
</head>
<body>
    <!-- –õ–û–ì–Ü–ù –°–ï–ö–¶–Ü–Ø -->
    <div id="login-section" class="login-section">
        <h2>üîê –í—Ö—ñ–¥ –≤ –∞–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—å</h2>
        <p>PantelMed - –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–æ—é</p>
        <input type="password" id="admin-password" placeholder="–ü–∞—Ä–æ–ª—å –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞" onkeypress="handlePasswordKeyPress(event)">
        <button onclick="adminLogin()">üöÄ –£–≤—ñ–π—Ç–∏</button>
        <div id="login-error" style="color: red; margin-top: 10px; display: none;"></div>
    </div>

    <!-- –ê–î–ú–Ü–ù –ü–ê–ù–ï–õ–¨ -->
    <div id="admin-panel" class="hidden">
        <div class="header">
            <h1>üìä PantelMed - –ê–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—å</h1>
            <p>–£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –ø–ª–∞—Ç–µ–∂–∞–º–∏, –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º–∏ —Ç–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è–º–∏</p>
            <button class="logout-btn" onclick="adminLogout()">üö™ –í–∏–π—Ç–∏</button>
        </div>

        <div class="container">
            <!-- –û–°–ù–û–í–ù–Ü –°–¢–ê–¢–ò–°–¢–ò–ö–ò -->
            <div class="dashboard-grid">
                <div class="stat-card revenue">
                    <div class="stat-label">üí∞ –ó–∞–≥–∞–ª—å–Ω–∏–π –¥–æ—Ö—ñ–¥</div>
                    <div class="stat-number" id="total-revenue">$0</div>
                    <div class="stat-change">–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...</div>
                </div>
                
                <div class="stat-card users">
                    <div class="stat-label">üë• –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤</div>
                    <div class="stat-number" id="total-users">0</div>
                    <div class="stat-change">–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...</div>
                </div>
                
                <div class="stat-card conversion">
                    <div class="stat-label">üì¶ –ó–∞–º–æ–≤–ª–µ–Ω—å</div>
                    <div class="stat-number" id="total-orders">0</div>
                    <div class="stat-change">–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...</div>
                </div>
                
                <div class="stat-card active">
                    <div class="stat-label">‚úÖ –ê–∫—Ç–∏–≤–Ω—ñ –ø—ñ–¥–ø–∏—Å–∫–∏</div>
                    <div class="stat-number" id="active-subscriptions">0</div>
                    <div class="stat-change">–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...</div>
                </div>
            </div>

            <!-- SYSTEM HEALTH -->
            <div class="section">
                <div class="section-header">
                    <div class="section-title">üè• –ó–¥–æ—Ä–æ–≤'—è —Å–∏—Å—Ç–µ–º–∏</div>
                    <button class="btn btn-primary" onclick="loadSystemHealth()">üîÑ –û–Ω–æ–≤–∏—Ç–∏</button>
                </div>
                
                <div class="dashboard-grid">
                    <div class="alert alert-info" id="mongodb-status">
                        <strong>üîµ MongoDB:</strong> –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞...<br>
                        <small>–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...</small>
                    </div>
                    <div class="alert alert-info" id="tron-status">
                        <strong>üîµ TRON API:</strong> –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞...<br>
                        <small>–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...</small>
                    </div>
                    <div class="alert alert-info" id="telegram-status">
                        <strong>üîµ Telegram Bot:</strong> –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞...<br>
                        <small>–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...</small>
                    </div>
                    <div class="alert alert-info" id="server-status">
                        <strong>üîµ Server:</strong> –û–Ω–ª–∞–π–Ω<br>
                        <small>PantelMed Platform v2024</small>
                    </div>
                </div>
            </div>

            <!-- –û–°–¢–ê–ù–ù–Ü –ó–ê–ú–û–í–õ–ï–ù–ù–Ø -->
            <div class="section">
                <div class="section-header">
                    <div class="section-title">üì¶ –û—Å—Ç–∞–Ω–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è</div>
                    <button class="btn btn-primary" onclick="loadOrders()">üîÑ –û–Ω–æ–≤–∏—Ç–∏</button>
                </div>
                
                <table class="table">
                    <thead>
                        <tr>
                            <th>‚è∞ –ß–∞—Å</th>
                            <th>üë§ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á</th>
                            <th>üí∞ –°—É–º–∞</th>
                            <th>üì± –ö–æ–Ω—Ç–∞–∫—Ç</th>
                            <th>üìä –°—Ç–∞—Ç—É—Å</th>
                            <th>üéØ –î—ñ—ó</th>
                        </tr>
                    </thead>
                    <tbody id="orders-table">
                        <tr>
                            <td colspan="6" style="text-align: center; padding: 40px;">
                                –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω—å...
                            </td>
                        </tr>
                    </tbody>
                </table>
            </div>

            <!-- RECENT ACTIVITY -->
            <div class="section">
                <div class="section-header">
                    <div class="section-title">üî¥ –ê–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å —Å–∏—Å—Ç–µ–º–∏</div>
                    <button class="btn btn-success" onclick="loadRecentActivity()">
                        üîÑ –û–Ω–æ–≤–∏—Ç–∏ <span class="refresh-indicator hidden" id="activity-spinner"></span>
                    </button>
                </div>
                
                <div class="real-time-log" id="activity-log">
                    <div>[–°–ò–°–¢–ï–ú–ê] –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∞–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—ñ...</div>
                </div>
            </div>
        </div>
    </div>

    <script>
        // –ì–õ–û–ë–ê–õ–¨–ù–Ü –ó–ú–Ü–ù–ù–Ü
        let isLoggedIn = false;
        let autoRefreshInterval = null;

        // –õ–û–ì–Ü–ù –°–ò–°–¢–ï–ú–ê
        function handlePasswordKeyPress(event) {
            if (event.key === 'Enter') {
                adminLogin();
            }
        }

        function adminLogin() {
            const password = document.getElementById('admin-password').value;
            const errorDiv = document.getElementById('login-error');
            
            if (!password) {
                showLoginError('–í–≤–µ–¥—ñ—Ç—å –ø–∞—Ä–æ–ª—å');
                return;
            }

            if (password === 'pantelmed_admin_2024') {
                isLoggedIn = true;
                
                document.getElementById('login-section').classList.add('hidden');
                document.getElementById('admin-panel').classList.remove('hidden');
                
                initializeAdminPanel();
            } else {
                showLoginError('–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –ø–∞—Ä–æ–ª—å');
            }
        }

        function showLoginError(message) {
            const errorDiv = document.getElementById('login-error');
            errorDiv.textContent = message;
            errorDiv.style.display = 'block';
            setTimeout(() => {
                errorDiv.style.display = 'none';
            }, 3000);
        }

        function adminLogout() {
            isLoggedIn = false;
            
            if (autoRefreshInterval) {
                clearInterval(autoRefreshInterval);
            }
            
            document.getElementById('admin-panel').classList.add('hidden');
            document.getElementById('login-section').classList.remove('hidden');
            document.getElementById('admin-password').value = '';
        }

        // –Ü–ù–Ü–¶–Ü–ê–õ–Ü–ó–ê–¶–Ü–Ø –ü–ê–ù–ï–õ–Ü
        async function initializeAdminPanel() {
            console.log('üöÄ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∞–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—ñ...');
            
            addLogEntry('[–°–ò–°–¢–ï–ú–ê] –ê–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—å –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î—Ç—å—Å—è...', 'info');
            
            await Promise.all([
                loadSystemHealth(),
                loadDashboardStats(),
                loadOrders(),
                loadRecentActivity()
            ]);
            
            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–æ–∂–Ω—ñ 30 —Å–µ–∫—É–Ω–¥
            autoRefreshInterval = setInterval(() => {
                loadSystemHealth();
                loadRecentActivity();
            }, 30000);
            
            addLogEntry('[–°–ò–°–¢–ï–ú–ê] –ê–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—å –≥–æ—Ç–æ–≤–∞ –¥–æ —Ä–æ–±–æ—Ç–∏', 'success');
        }

        // –ó–ê–í–ê–ù–¢–ê–ñ–ï–ù–ù–Ø –î–ê–ù–ò–•
        async function loadSystemHealth() {
            try {
                const response = await fetch('/api/admin/health');
                const data = await response.json();
                
                // MongoDB —Å—Ç–∞—Ç—É—Å
                updateStatusIndicator('mongodb-status', data.mongodb);
                updateStatusIndicator('tron-status', data.tron);
                updateStatusIndicator('telegram-status', data.telegram);
                
            } catch (error) {
                console.error('Error loading system health:', error);
                addLogEntry('[–ü–û–ú–ò–õ–ö–ê] –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º–∏', 'error');
            }
        }

        function updateStatusIndicator(elementId, statusData) {
            const element = document.getElementById(elementId);
            const isHealthy = statusData.status === 'ok' || statusData.healthy;
            
            element.className = isHealthy ? 'alert alert-success' : 'alert alert-danger';
            element.innerHTML = `
                <strong>${isHealthy ? 'üü¢' : 'üî¥'} ${statusData.name}:</strong> ${statusData.message}<br>
                <small>${statusData.details || '–ù–µ–º–∞—î –¥–æ–¥–∞—Ç–∫–æ–≤–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó'}</small>
            `;
        }

        async function loadDashboardStats() {
            try {
                const response = await fetch('/api/admin/stats');
                const data = await response.json();
                
                document.getElementById('total-revenue').textContent = '$' + (data.total_revenue || 0).toFixed(2);
                document.getElementById('total-users').textContent = data.total_users || 0;
                document.getElementById('total-orders').textContent = data.total_orders || 0;
                document.getElementById('active-subscriptions').textContent = data.active_subscriptions || 0;
                
                // –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                const changes = [
                    `+${(data.revenue_change || 0).toFixed(1)}% —Ü—å–æ–≥–æ –º—ñ—Å—è—Ü—è`,
                    `+${data.new_users || 0} —Å—å–æ–≥–æ–¥–Ω—ñ`,
                    `${data.pending_orders || 0} –≤ –æ–±—Ä–æ–±—Ü—ñ`,
                    `${data.expiring_soon || 0} –∑–∞–∫—ñ–Ω—á—É—é—Ç—å—Å—è —Å–∫–æ—Ä–æ`
                ];
                
                document.querySelectorAll('.stat-change').forEach((el, index) => {
                    el.textContent = changes[index] || '–û–Ω–æ–≤–ª–µ–Ω–æ';
                });
                
            } catch (error) {
                console.error('Error loading dashboard stats:', error);
                addLogEntry('[–ü–û–ú–ò–õ–ö–ê] –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É', 'error');
            }
        }

        async function loadOrders() {
            try {
                const response = await fetch('/api/admin/orders');
                const data = await response.json();
                
                const tbody = document.getElementById('orders-table');
                tbody.innerHTML = '';
                
                if (data.orders && data.orders.length > 0) {
                    data.orders.forEach(order => {
                        const row = createOrderRow(order);
                        tbody.appendChild(row);
                    });
                } else {
                    tbody.innerHTML = '<tr><td colspan="6" style="text-align: center; padding: 40px;">–ù–µ–º–∞—î –∑–∞–º–æ–≤–ª–µ–Ω—å</td></tr>';
                }
                
                addLogEntry(`[–î–ê–ù–Ü] –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ ${data.orders ? data.orders.length : 0} –∑–∞–º–æ–≤–ª–µ–Ω—å`, 'info');
                
            } catch (error) {
                console.error('Error loading orders:', error);
                addLogEntry('[–ü–û–ú–ò–õ–ö–ê] –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è', 'error');
            }
        }

        function createOrderRow(order) {
            const row = document.createElement('tr');
            
            const statusClass = {
                'pending': 'status-pending',
                'completed': 'status-active', 
                'failed': 'status-failed'
            }[order.status] || 'status-pending';
            
            const telegramUser = order.telegram_user || {};
            const orderInfo = order.order_info || {};
            
            row.innerHTML = `
                <td>${new Date(order.created_at).toLocaleString('uk-UA')}</td>
                <td>
                    <strong>${telegramUser.first_name || 'N/A'} ${telegramUser.last_name || ''}</strong><br>
                    <small>@${telegramUser.username || 'no_username'}</small>
                </td>
                <td><strong>$${(order.total_amount || 0).toFixed(2)}</strong></td>
                <td>
                    üìû ${orderInfo.phone || 'N/A'}<br>
                    üìç ${orderInfo.city || 'N/A'}
                </td>
                <td><span class="status-badge ${statusClass}">${order.status || 'pending'}</span></td>
                <td>
                    <button class="btn btn-primary" onclick="contactUser('${telegramUser.id}', '${telegramUser.username}')">
                        üí¨ –ù–∞–ø–∏—Å–∞—Ç–∏
                    </button>
                </td>
            `;
            
            return row;
        }

        function contactUser(telegramId, username) {
            if (telegramId && telegramId !== 'undefined') {
                window.open(`tg://user?id=${telegramId}`, '_blank');
            } else if (username && username !== 'undefined') {
                window.open(`https://t.me/${username}`, '_blank');
            } else {
                alert('–ù–µ–º–∞—î –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –¥–ª—è —Ü—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞');
            }
        }

        async function loadRecentActivity() {
            const spinner = document.getElementById('activity-spinner');
            spinner.classList.remove('hidden');
            
            try {
                // –°–∏–º—É–ª—é—î–º–æ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –¥–ª—è –¥–µ–º–æ
                const activities = [
                    '[MONITOR] –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–æ–≤–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π...',
                    '[API] TRON API –≤—ñ–¥–ø–æ–≤—ñ–¥—å: 200 OK',
                    '[DB] MongoDB –æ–ø–µ—Ä–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–∞',
                    '[BOT] Telegram –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ',
                    '[ORDER] –ù–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –æ–±—Ä–æ–±–ª–µ–Ω–æ',
                    '[SYSTEM] –í—Å—ñ —Å–µ—Ä–≤—ñ—Å–∏ –ø—Ä–∞—Ü—é—é—Ç—å –Ω–æ—Ä–º–∞–ª—å–Ω–æ'
                ];
                
                const randomActivity = activities[Math.floor(Math.random() * activities.length)];
                addLogEntry(randomActivity, 'info');
                
            } catch (error) {
                addLogEntry('[–ü–û–ú–ò–õ–ö–ê] –ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å', 'error');
            } finally {
                spinner.classList.add('hidden');
            }
        }

        // –õ–û–ì–£–í–ê–ù–ù–Ø
        function addLogEntry(message, type = 'info') {
            const log = document.getElementById('activity-log');
            const entry = document.createElement('div');
            
            const colors = {
                success: '#00ff00',
                warning: '#ffff00',
                error: '#ff0000',
                info: '#00ffff'
            };
            
            const timestamp = new Date().toLocaleTimeString();
            entry.style.color = colors[type] || colors.info;
            entry.textContent = `[${timestamp}] ${message}`;
            
            log.appendChild(entry);
            log.scrollTop = log.scrollHeight;
            
            // –û–±–º–µ–∂—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–ø–∏—Å—ñ–≤
            while (log.children.length > 100) {
                log.removeChild(log.firstChild);
            }
        }
    </script>
</body>
</html>
"""

# ==============================================
# –°–¢–ê–¢–ò–ß–ù–Ü –§–ê–ô–õ–ò
# ==============================================

@app.route('/')
def serve_index():
    """–ì–æ–ª–æ–≤–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞ - React –¥–æ–¥–∞—Ç–æ–∫"""
    return send_from_directory('.', 'index.html')

@app.route('/admin')
def serve_admin():
    """–ê–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—å"""
    return render_template_string(ADMIN_PANEL_HTML)

@app.route('/<path:filename>')
def serve_static(filename):
    """–°—Ç–∞—Ç–∏—á–Ω—ñ —Ñ–∞–π–ª–∏"""
    return send_from_directory('.', filename)

# ==============================================
# TELEGRAM API ENDPOINTS
# ==============================================

@app.route("/api/telegram-login", methods=["POST"])
def telegram_login():
    """–û–±—Ä–æ–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó —á–µ—Ä–µ–∑ Telegram Login Widget"""
    try:
        data = request.get_json()
        telegram_user = data.get('telegram_user')
        source = data.get('source', 'widget')
        
        if not telegram_user:
            return jsonify({"error": "Telegram user data required"}), 400
        
        logger.info(f"üì± Telegram login: {telegram_user.get('id')} via {source}")
        
        # –í–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—è –¥–∞–Ω–∏—Ö (—Ç—ñ–ª—å–∫–∏ –¥–ª—è widget)
        if source == 'widget':
            if not verify_telegram_auth(telegram_user.copy()):
                logger.warning(f"‚ùå Invalid Telegram auth data for user {telegram_user.get('id')}")
                return jsonify({"error": "Invalid Telegram authentication"}), 401
        
        # –°—Ç–≤–æ—Ä–∏—Ç–∏ –∞–±–æ –æ–Ω–æ–≤–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ –±–∞–∑—ñ
        user_data = {
            "user_id": f"tg_{telegram_user['id']}",
            "telegram_id": telegram_user['id'],
            "first_name": telegram_user.get('first_name', ''),
            "last_name": telegram_user.get('last_name', ''),
            "username": telegram_user.get('username', ''),
            "photo_url": telegram_user.get('photo_url', ''),
            "auth_date": datetime.utcnow(),
            "source": source,
            "last_login": datetime.utcnow(),
            "active": True
        }
        
        # –ó–±–µ—Ä–µ–≥—Ç–∏ –≤ MongoDB
        safe_db_operation(
            "Save telegram user",
            lambda: users_collection.update_one(
                {"telegram_id": telegram_user['id']},
                {"$set": user_data},
                upsert=True
            ) if users_collection else None
        )
        
        return jsonify({
            "status": "success",
            "user_id": user_data["user_id"],
            "message": "Telegram authentication successful"
        })
        
    except Exception as e:
        logger.error(f"‚ùå Telegram login error: {str(e)}")
        return jsonify({"error": "Authentication failed"}), 500

@app.route("/api/telegram-user/<user_id>", methods=["GET"])
def get_telegram_user(user_id):
    """–û—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ Telegram –ø–æ ID"""
    try:
        # –ü–æ—à—É–∫ –≤ –±–∞–∑—ñ
        if users_collection:
            user = safe_db_operation(
                "Find telegram user",
                lambda: users_collection.find_one({"telegram_id": int(user_id)})
            )
            if user:
                user['_id'] = str(user['_id'])
                if 'auth_date' in user:
                    user['auth_date'] = user['auth_date'].isoformat()
                if 'last_login' in user:
                    user['last_login'] = user['last_login'].isoformat()
                return jsonify(user)
        
        return jsonify({"error": "User not found"}), 404
        
    except Exception as e:
        logger.error(f"‚ùå Error fetching Telegram user {user_id}: {e}")
        return jsonify({"error": "Failed to fetch user data"}), 500

@app.route("/api/telegram-notify", methods=["POST"])
def telegram_notify():
    """–í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –≤ Telegram"""
    try:
        data = request.get_json()
        telegram_id = data.get('telegram_id')
        message = data.get('message')
        
        if not telegram_id or not message:
            return jsonify({"error": "telegram_id and message required"}), 400
        
        # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —á–µ—Ä–µ–∑ Telegram Bot API
        bot_api_url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
        payload = {
            "chat_id": telegram_id,
            "text": message,
            "parse_mode": "HTML"
        }
        
        response = requests.post(bot_api_url, json=payload, timeout=10)
        
        if response.status_code == 200:
            result = response.json()
            if result.get('ok'):
                logger.info(f"‚úÖ Message sent to {telegram_id}")
                return jsonify({"status": "sent", "message_id": result['result']['message_id']})
        
        logger.error(f"‚ùå Failed to send message to {telegram_id}: {response.text}")
        return jsonify({"error": "Failed to send message"}), 500
        
    except Exception as e:
        logger.error(f"‚ùå Telegram notify error: {str(e)}")
        return jsonify({"error": "Notification failed"}), 500

# ==============================================
# ORDERS API
# ==============================================

@app.route("/api/create-order", methods=["POST"])
def create_order():
    """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è"""
    try:
        data = request.get_json()
        
        if not data:
            return jsonify({"error": "Order data required"}), 400
        
        # –ì–µ–Ω–µ—Ä—É—î–º–æ —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π ID –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
        order_id = f"ORDER_{int(datetime.utcnow().timestamp())}_{data.get('user_id', 'unknown').split('_')[-1]}"
        
        # –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–∏—Ö –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
        order_data = {
            "order_id": order_id,
            "user_id": data.get('user_id'),
            "telegram_user": data.get('telegram_user'),
            "items": data.get('items', []),
            "total_amount": data.get('total_amount', 0),
            "order_info": data.get('order_info', {}),
            "status": "pending",
            "payment_status": "pending",
            "created_at": datetime.utcnow(),
            "source": data.get('source', 'web')
        }
        
        logger.info(f"üì¶ Creating order {order_id} for user {data.get('user_id')}")
        
        # –ó–±–µ—Ä–µ–≥—Ç–∏ –≤ MongoDB
        safe_db_operation(
            "Insert order",
            lambda: orders_collection.insert_one(order_data) if orders_collection else None
        )
        
        return jsonify({
            "status": "created",
            "order_id": order_id,
            "message": "Order created successfully"
        })
        
    except Exception as e:
        logger.error(f"‚ùå Create order error: {str(e)}")
        return jsonify({"error": "Failed to create order"}), 500

@app.route("/api/order-notification", methods=["POST"])
def order_notification():
    """–°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –Ω–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —á–µ—Ä–µ–∑ Telegram"""
    try:
        data = request.get_json()
        order_data = data.get('order')
        
        if not order_data:
            return jsonify({"error": "Order data required"}), 400
        
        telegram_user = order_data.get('telegram_user', {})
        items = order_data.get('items', [])
        total_amount = order_data.get('total_amount', 0)
        order_info = order_data.get('order_info', {})
        
        # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç—É
        customer_message = f"""
üéâ <b>–î—è–∫—É—î–º–æ –∑–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è!</b>

üì¶ <b>–í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:</b>
"""
        for item in items:
            customer_message += f"‚Ä¢ {item['name']} x{item['quantity']} - ${item['price'] * item['quantity']:.2f}\n"
        
        customer_message += f"""
üí∞ <b>–ó–∞–≥–∞–ª–æ–º:</b> ${total_amount:.2f}
üìç <b>–î–æ—Å—Ç–∞–≤–∫–∞:</b> {order_info.get('city', '')} - {order_info.get('warehouse', '')}

–ú–∏ –∑–≤'—è–∂–µ–º–æ—Å—è –∑ –≤–∞–º–∏ –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º!
        """
        
        # –í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –∫–ª—ñ—î–Ω—Ç—É
        if telegram_user.get('id'):
            try:
                requests.post(
                    f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage",
                    json={
                        "chat_id": telegram_user['id'],
                        "text": customer_message,
                        "parse_mode": "HTML"
                    },
                    timeout=10
                )
            except Exception as e:
                logger.error(f"Failed to send customer notification: {e}")
        
        # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—É
        if ADMIN_TELEGRAM_ID != "YOUR_ADMIN_ID":
            admin_message = f"""
üÜï <b>–ù–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è!</b>

üë§ <b>–ö–ª—ñ—î–Ω—Ç:</b> {telegram_user.get('first_name', '')} {telegram_user.get('last_name', '')}
üì± @{telegram_user.get('username', 'no_username')}

üí∞ <b>–°—É–º–∞:</b> ${total_amount:.2f}
üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {order_info.get('phone', '')}
üìç <b>–î–æ—Å—Ç–∞–≤–∫–∞:</b> {order_info.get('city', '')} - {order_info.get('warehouse', '')}
"""
            
            try:
                requests.post(
                    f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage",
                    json={
                        "chat_id": ADMIN_TELEGRAM_ID,
                        "text": admin_message,
                        "parse_mode": "HTML"
                    },
                    timeout=10
                )
            except Exception as e:
                logger.error(f"Failed to send admin notification: {e}")
        
        return jsonify({"status": "notifications_sent"})
        
    except Exception as e:
        logger.error(f"‚ùå Order notification error: {str(e)}")
        return jsonify({"error": "Notification failed"}), 500

# ==============================================
# PAYMENT API
# ==============================================

@app.route("/create-payment", methods=["POST"])
def create_payment():
    """–°—Ç–≤–æ—Ä—é—î–º–æ –∑–∞–ø–∏—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    try:
        data = request.get_json()
        user_id = data.get("user_id", f"web_{int(datetime.utcnow().timestamp())}")
        test_mode = data.get("test_mode", False)
        
        logger.info(f"üí≥ Creating payment for user: {user_id}, test_mode: {test_mode}")
        
        # –í–∏–∑–Ω–∞—á–∞—î–º–æ –º—ñ–Ω—ñ–º–∞–ª—å–Ω—É —Å—É–º—É
        min_amount = MIN_AMOUNT_TEST if test_mode else MIN_AMOUNT
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π payment_id
        payment_id = generate_payment_id(user_id)
        
        # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Ç–∞ –æ—á—ñ–∫—É–≤–∞–Ω–∏–π –ø–ª–∞—Ç—ñ–∂
        user_data = {
            "user_id": user_id,
            "payment_id": payment_id,
            "amount_expected": min_amount,
            "wallet_address": TRON_WALLET,
            "created_at": datetime.utcnow(),
            "payment_completed": False,
            "test_mode": test_mode
        }
        
        # –ó–±–µ—Ä–µ–≥—Ç–∏ –≤ MongoDB
        safe_db_operation(
            "Update/create user payment",
            lambda: users_collection.update_one(
                {"user_id": user_id},
                {"$set": user_data},
                upsert=True
            ) if users_collection else None
        )
        
        logger.info(f"‚úÖ Payment request created: {payment_id}")
        
        return jsonify({
            "payment_id": payment_id,
            "wallet_address": TRON_WALLET,
            "amount": min_amount,
            "currency": "USDT (TRC-20)",
            "test_mode": test_mode
        })
    
    except Exception as e:
        logger.error(f"üö® Error in create_payment: {str(e)}")
        return jsonify({"error": f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –ø–ª–∞—Ç–µ–∂—É: {str(e)}"}), 500

@app.route("/check-payment", methods=["POST"])
def check_payment():
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –Ω–∞–¥—ñ–π—à–ª–∞ –æ–ø–ª–∞—Ç–∞ –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    try:
        data = request.get_json()
        user_id = data.get("user_id")
        test_mode = data.get("test_mode", False)
        auto_check = data.get("auto_check", False)
        
        if not user_id:
            return jsonify({"error": "user_id –æ–±–æ–≤'—è–∑–∫–æ–≤–∏–π"}), 400
        
        logger.info(f"üîç Checking payment for user: {user_id}, test_mode: {test_mode}, auto: {auto_check}")
        
        # –í–∏–∑–Ω–∞—á–∞—î–º–æ –º—ñ–Ω—ñ–º–∞–ª—å–Ω—É —Å—É–º—É
        min_amount = MIN_AMOUNT_TEST if test_mode else MIN_AMOUNT
        
        # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        user = safe_db_operation(
            "Find user", 
            lambda: users_collection.find_one({"user_id": user_id}) if users_collection else None
        )
        
        if user is None:
            # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —è–∫—â–æ –Ω–µ —ñ—Å–Ω—É—î
            user_data = {
                "user_id": user_id,
                "created_at": datetime.utcnow(),
                "payment_completed": False
            }
            safe_db_operation(
                "Create user",
                lambda: users_collection.insert_one(user_data) if users_collection else None
            )
            user = user_data
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –≤–∂–µ —î –∞–∫—Ç–∏–≤–Ω–∞ –ø—ñ–¥–ø–∏—Å–∫–∞
        active_subscription = safe_db_operation(
            "Find active subscription",
            lambda: subscriptions_collection.find_one({
                "user_id": user_id,
                "expires_at": {"$gt": datetime.utcnow()},
                "active": True
            }) if subscriptions_collection else None
        )
        
        if active_subscription:
            days_left = (active_subscription["expires_at"] - datetime.utcnow()).days
            logger.info(f"‚úÖ Active subscription found for user {user_id}, days left: {days_left}")
            return jsonify({
                "access": "granted",
                "subscription": {
                    "expires_at": active_subscription["expires_at"].isoformat(),
                    "days_left": days_left
                }
            })
        
        # –®—É–∫–∞—î–º–æ –Ω–æ–≤—ñ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó –≤ TRON blockchain
        url = f"https://api.trongrid.io/v1/accounts/{TRON_WALLET}/transactions/trc20?limit=20"
        headers = {"accept": "application/json"}
        
        response = requests.get(url, headers=headers, timeout=15)
        response.raise_for_status()
        data_response = response.json()
        
        # –ß–∞—Å–æ–≤–∏–π –¥—ñ–∞–ø–∞–∑–æ–Ω –¥–ª—è –ø–æ—à—É–∫—É (–æ—Å—Ç–∞–Ω–Ω—ñ 60 —Ö–≤–∏–ª–∏–Ω)
        recent_time = datetime.utcnow() - timedelta(minutes=60)
        user_created_time = user.get("created_at", recent_time)
        search_from = max(recent_time, user_created_time)
        
        for tx in data_response.get("data", []):
            tx_id = tx.get("transaction_id")
            value = int(tx.get("value", "0")) / (10 ** 6)
            tx_timestamp = datetime.fromtimestamp(tx["block_timestamp"] / 1000)
            
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—è –≤–∂–µ –æ–±—Ä–æ–±–ª–µ–Ω–∞
            existing_tx = safe_db_operation(
                "Check existing transaction",
                lambda: transactions_collection.find_one({"tx_id": tx_id}) if transactions_collection else None
            )
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —É–º–æ–≤–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó
            if (value >= min_amount and 
                tx_timestamp > search_from and
                not existing_tx):
                
                logger.info(f"‚úÖ Found matching transaction: {value} USDT, tx_id: {tx_id}")
                
                # –ó–∞–ø–∏—Å—É—î–º–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é
                transaction_data = {
                    "tx_id": tx_id,
                    "user_id": user_id,
                    "amount": value,
                    "timestamp": tx_timestamp,
                    "processed": True,
                    "created_at": datetime.utcnow(),
                    "test_mode": test_mode,
                    "auto_detected": auto_check
                }
                
                safe_db_operation(
                    "Insert transaction",
                    lambda: transactions_collection.insert_one(transaction_data) if transactions_collection else None
                )
                
                # –°—Ç–≤–æ—Ä—é—î–º–æ –ø—ñ–¥–ø–∏—Å–∫—É
                expires_at = datetime.utcnow() + timedelta(days=SUBSCRIPTION_DAYS)
                subscription_data = {
                    "user_id": user_id,
                    "tx_id": tx_id,
                    "starts_at": datetime.utcnow(),
                    "expires_at": expires_at,
                    "active": True,
                    "created_at": datetime.utcnow(),
                    "test_mode": test_mode,
                    "auto_detected": auto_check
                }
                
                safe_db_operation(
                    "Insert subscription",
                    lambda: subscriptions_collection.insert_one(subscription_data) if subscriptions_collection else None
                )
                
                # –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
                safe_db_operation(
                    "Update user",
                    lambda: users_collection.update_one(
                        {"user_id": user_id},
                        {"$set": {"payment_completed": True, "last_payment_at": datetime.utcnow()}}
                    ) if users_collection else None
                )
                
                logger.info(f"‚úÖ Subscription created for user {user_id}")
                
                return jsonify({
                    "access": "granted",
                    "subscription": {
                        "expires_at": expires_at.isoformat(),
                        "days_left": SUBSCRIPTION_DAYS
                    },
                    "transaction": {
                        "amount": value,
                        "tx_id": tx_id
                    }
                })
        
        return jsonify({
            "access": "denied", 
            "message": f"–ü–ª–∞—Ç—ñ–∂ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π. –ù–∞–¥—ñ—à–ª—ñ—Ç—å {min_amount} USDT —ñ —Å–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –∫—ñ–ª—å–∫–∞ —Ö–≤–∏–ª–∏–Ω."
        })
        
    except requests.RequestException as e:
        logger.error(f"üö® TRON API error: {str(e)}")
        return jsonify({"error": f"–ü–æ–º–∏–ª–∫–∞ –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ TRON API: {str(e)}"}), 500
    except Exception as e:
        logger.error(f"üö® General error in check_payment: {str(e)}")
        return jsonify({"error": f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ –ø–ª–∞—Ç–µ–∂—É: {str(e)}"}), 500

# ==============================================
# ADMIN API
# ==============================================

@app.route("/api/admin/health", methods=["GET"])
def admin_health():
    """–ó–¥–æ—Ä–æ–≤'—è —Å–∏—Å—Ç–µ–º–∏ –¥–ª—è –∞–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—ñ"""
    try:
        # MongoDB —Å—Ç–∞—Ç—É—Å
        mongodb_status = {
            "name": "MongoDB",
            "status": "ok" if db is not None else "error",
            "healthy": True if db is not None else False,
            "message": "–ü—ñ–¥–∫–ª—é—á–µ–Ω–∞" if db is not None else "–í—ñ–¥–∫–ª—é—á–µ–Ω–∞",
            "details": f"–ö–æ–ª–µ–∫—Ü—ñ—ó: {len(db.list_collection_names()) if db else 0}"
        }
        
        # TRON API —Å—Ç–∞—Ç—É—Å
        try:
            tron_response = requests.get(f"https://api.trongrid.io/v1/accounts/{TRON_WALLET}/transactions/trc20?limit=1", timeout=5)
            tron_healthy = tron_response.status_code == 200
            tron_status = {
                "name": "TRON API",
                "status": "ok" if tron_healthy else "error",
                "healthy": tron_healthy,
                "message": "–ü—Ä–∞—Ü—é—î" if tron_healthy else "–ù–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π",
                "details": f"–ì–∞–º–∞–Ω–µ—Ü—å: {TRON_WALLET[:20]}..."
            }
        except:
            tron_status = {
                "name": "TRON API",
                "status": "error",
                "healthy": False,
                "message": "–ù–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π",
                "details": "–ü–æ–º–∏–ª–∫–∞ –∑'—î–¥–Ω–∞–Ω–Ω—è"
            }
        
        # Telegram Bot —Å—Ç–∞—Ç—É—Å
        try:
            bot_response = requests.get(f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/getMe", timeout=5)
            telegram_healthy = bot_response.status_code == 200
            telegram_status = {
                "name": "Telegram Bot",
                "status": "ok" if telegram_healthy else "error",
                "healthy": telegram_healthy,
                "message": "–ê–∫—Ç–∏–≤–Ω–∏–π" if telegram_healthy else "–ù–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π",
                "details": f"@{TELEGRAM_BOT_USERNAME}"
            }
        except:
            telegram_status = {
                "name": "Telegram Bot",
                "status": "error",
                "healthy": False,
                "message": "–ù–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π",
                "details": "–ü–æ–º–∏–ª–∫–∞ –∑'—î–¥–Ω–∞–Ω–Ω—è"
            }
        
        return jsonify({
            "mongodb": mongodb_status,
            "tron": tron_status,
            "telegram": telegram_status
        })
        
    except Exception as e:
        logger.error(f"Admin health check error: {e}")
        return jsonify({"error": "Health check failed"}), 500

@app.route("/api/admin/stats", methods=["GET"])
def admin_stats():
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –∞–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—ñ"""
    try:
        # –ü—ñ–¥—Ä–∞—Ö—É–Ω–∫–∏ –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
        total_users = 0
        total_orders = 0
        total_revenue = 0
        active_subscriptions = 0
        
        if db:
            # –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ
            total_users = safe_db_operation(
                "Count users",
                lambda: users_collection.count_documents({}) if users_collection else 0
            ) or 0
            
            # –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è
            total_orders = safe_db_operation(
                "Count orders",
                lambda: orders_collection.count_documents({}) if orders_collection else 0
            ) or 0
            
            # –î–æ—Ö—ñ–¥
            revenue_pipeline = [
                {"$group": {"_id": None, "total": {"$sum": "$total_amount"}}}
            ]
            revenue_result = safe_db_operation(
                "Calculate revenue",
                lambda: list(orders_collection.aggregate(revenue_pipeline)) if orders_collection else []
            )
            if revenue_result:
                total_revenue = revenue_result[0].get('total', 0)
            
            # –ê–∫—Ç–∏–≤–Ω—ñ –ø—ñ–¥–ø–∏—Å–∫–∏
            active_subscriptions = safe_db_operation(
                "Count active subscriptions",
                lambda: subscriptions_collection.count_documents({
                    "expires_at": {"$gt": datetime.utcnow()},
                    "active": True
                }) if subscriptions_collection else 0
            ) or 0
        
        return jsonify({
            "total_users": total_users,
            "total_orders": total_orders,
            "total_revenue": total_revenue,
            "active_subscriptions": active_subscriptions,
            "revenue_change": 12.5,  # Mock data
            "new_users": 8,
            "pending_orders": 3,
            "expiring_soon": 2
        })
        
    except Exception as e:
        logger.error(f"Admin stats error: {e}")
        return jsonify({"error": "Stats calculation failed"}), 500

@app.route("/api/admin/orders", methods=["GET"])
def admin_orders():
    """–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –¥–ª—è –∞–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—ñ"""
    try:
        orders = []
        
        if orders_collection:
            # –û—Ç—Ä–∏–º—É—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ 50 –∑–∞–º–æ–≤–ª–µ–Ω—å
            cursor = safe_db_operation(
                "Find orders",
                lambda: orders_collection.find().sort('created_at', -1).limit(50)
            )
            
            if cursor:
                for order in cursor:
                    # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ ObjectId —Ç–∞ datetime –¥–ª—è JSON
                    order['_id'] = str(order['_id'])
                    if 'created_at' in order:
                        order['created_at'] = order['created_at'].isoformat()
                    orders.append(order)
        
        return jsonify({
            "orders": orders,
            "total": len(orders)
        })
        
    except Exception as e:
        logger.error(f"Admin orders error: {e}")
        return jsonify({"error": "Failed to fetch orders"}), 500

# ==============================================
# ONRAMPER INTEGRATION
# ==============================================

@app.route("/onramper-webhook", methods=["POST"])
def onramper_webhook():
    """–û–±—Ä–æ–±–∫–∞ –≤–µ–±—Ö—É–∫—ñ–≤ –≤—ñ–¥ Onramper"""
    try:
        payload = request.get_data()
        data = json.loads(payload.decode('utf-8'))
        event_type = data.get('type')
        transaction_data = data.get('data', {})
        
        logger.info(f"üì• Onramper webhook: {event_type}")
        
        if event_type == 'ONRAMP_TRANSACTION_COMPLETED':
            return handle_onramper_success(transaction_data)
        elif event_type == 'ONRAMP_TRANSACTION_FAILED':
            return handle_onramper_failed(transaction_data)
        else:
            return jsonify({"status": "ignored"}), 200
            
    except Exception as e:
        logger.error(f"‚ùå Onramper webhook error: {str(e)}")
        return jsonify({"error": "Processing failed"}), 500

def handle_onramper_success(data):
    """–£—Å–ø—ñ—à–Ω–∞ Onramper —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—è"""
    tx_id = data.get('id')
    crypto_amount = float(data.get('cryptoAmount', 0))
    crypto_currency = data.get('cryptoCurrency', '')
    user_wallet = data.get('walletAddress')
    
    logger.info(f"‚úÖ Onramper success: {crypto_amount} {crypto_currency}")
    
    if crypto_currency.upper() != 'USDT' or crypto_amount < 2.5:
        return jsonify({"status": "invalid_amount"}), 400
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    user_id = f"onramper_{int(datetime.utcnow().timestamp())}"
    
    # –ê–∫—Ç–∏–≤—É—î–º–æ –ø—ñ–¥–ø–∏—Å–∫—É
    expires_at = datetime.utcnow() + timedelta(days=SUBSCRIPTION_DAYS)
    subscription_data = {
        "user_id": user_id,
        "payment_method": "onramper",
        "transaction_id": tx_id,
        "amount_paid": crypto_amount,
        "currency": crypto_currency,
        "wallet_address": user_wallet,
        "expires_at": expires_at,
        "activated_at": datetime.utcnow(),
        "active": True,
        "created_at": datetime.utcnow()
    }
    
    safe_db_operation(
        "Insert onramper subscription",
        lambda: subscriptions_collection.insert_one(subscription_data) if subscriptions_collection else None
    )
    
    return jsonify({"status": "subscription_activated"}), 200

def handle_onramper_failed(data):
    """–ù–µ–≤–¥–∞–ª–∞ Onramper —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—è"""
    tx_id = data.get('id')
    error_reason = data.get('failureReason', 'Unknown error')
    
    logger.warning(f"‚ùå Onramper failed: {tx_id} - {error_reason}")
    
    return jsonify({"status": "noted"}), 200

# ==============================================
# UTILITY ENDPOINTS
# ==============================================

@app.route("/debug-tron", methods=["GET"])
def debug_tron():
    """Debug endpoint –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ TRON API"""
    try:
        url = f"https://api.trongrid.io/v1/accounts/{TRON_WALLET}/transactions/trc20?limit=5"
        headers = {"accept": "application/json"}
        
        response = requests.get(url, headers=headers, timeout=15)
        response.raise_for_status()
        data = response.json()
        
        # –§–æ—Ä–º–∞—Ç—É—î–º–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó
        formatted_transactions = []
        recent_time = datetime.utcnow() - timedelta(minutes=60)
        
        for tx in data.get("data", []):
            amount = int(tx.get("value", "0")) / (10 ** 6)
            timestamp = datetime.fromtimestamp(tx["block_timestamp"] / 1000)
            is_recent = timestamp > recent_time
            formatted_transactions.append({
                "amount": amount,
                "timestamp": timestamp.isoformat(),
                "tx_id": tx.get("transaction_id", "")[:16] + "...",
                "is_recent": is_recent,
                "matches_criteria": amount >= MIN_AMOUNT and is_recent
            })
        
        return jsonify({
            "status": "ok",
            "wallet": TRON_WALLET,
            "transactions_count": len(formatted_transactions),
            "transactions": formatted_transactions,
            "min_amount_required": MIN_AMOUNT,
            "min_amount_test": MIN_AMOUNT_TEST,
            "search_from": recent_time.isoformat()
        })
        
    except Exception as e:
        return jsonify({
            "status": "error",
            "error": str(e),
            "wallet": TRON_WALLET
        }), 500

@app.route("/health", methods=["GET"])
def health():
    """Health check endpoint"""
    mongodb_status = "connected" if db is not None else "disconnected"
    
    # –¢–µ—Å—Ç—É—î–º–æ MongoDB
    mongodb_test = False
    if db is not None:
        try:
            db.list_collection_names()
            mongodb_test = True
        except Exception as e:
            logger.error(f"MongoDB health check failed: {e}")
            mongodb_test = False
    
    # –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—é
    monitoring_info = {
        "active": payment_monitor is not None and payment_monitor.running if payment_monitor else False,
        "pending_payments": len(payment_monitor.pending_payments) if payment_monitor else 0
    }
    
    return jsonify({
        "status": "ok", 
        "version": "PANTELMED_PLATFORM_2024",
        "timestamp": datetime.utcnow().isoformat(),
        "mongodb": {
            "status": mongodb_status,
            "connection_test": mongodb_test,
            "uri": MONGO_URI.replace("manreds7", "***") if MONGO_URI else "not set"
        },
        "tron_wallet": TRON_WALLET,
        "automation": monitoring_info,
        "telegram_bot": TELEGRAM_BOT_USERNAME
    })

# ==============================================
# PAYMENT MONITORING
# ==============================================

@app.route("/start-payment-tracking", methods=["POST"])
def start_payment_tracking():
    """–ü–æ—á–∞—Ç–æ–∫ –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –ø–ª–∞—Ç–µ–∂—É –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    try:
        data = request.get_json()
        user_id = data.get("user_id")
        test_mode = data.get("test_mode", False)
        
        if not user_id:
            return jsonify({"error": "user_id –æ–±–æ–≤'—è–∑–∫–æ–≤–∏–π"}), 400
            
        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –º–æ–Ω—ñ—Ç–æ—Ä —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
        if payment_monitor is None:
            init_payment_monitor()
            
        # –í–∏–∑–Ω–∞—á–∞—î–º–æ —Å—É–º—É
        amount = MIN_AMOUNT_TEST if test_mode else MIN_AMOUNT
        
        # –î–æ–¥–∞—î–º–æ –¥–æ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É
        if payment_monitor:
            payment_monitor.add_pending_payment(user_id, amount)
        
        return jsonify({
            "status": "tracking_started",
            "user_id": user_id,
            "amount": amount,
            "message": "–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è —Ä–æ–∑–ø–æ—á–∞—Ç–æ"
        })
        
    except Exception as e:
        logger.error(f"‚ùå Error starting tracking: {e}")
        return jsonify({"error": str(e)}), 500

@app.route("/subscription-status", methods=["POST"])
def subscription_status():
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—Ç–∞—Ç—É—Å –ø—ñ–¥–ø–∏—Å–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    try:
        data = request.get_json()
        user_id = data.get("user_id")
        
        if not user_id:
            return jsonify({"error": "user_id –æ–±–æ–≤'—è–∑–∫–æ–≤–∏–π"}), 400
        
        # –®—É–∫–∞—î–º–æ –∞–∫—Ç–∏–≤–Ω—É –ø—ñ–¥–ø–∏—Å–∫—É
        subscription = safe_db_operation(
            "Find subscription",
            lambda: subscriptions_collection.find_one({
                "user_id": user_id,
                "expires_at": {"$gt": datetime.utcnow()},
                "active": True
            }) if subscriptions_collection else None
        )
        
        if subscription:
            days_left = (subscription["expires_at"] - datetime.utcnow()).days
            return jsonify({
                "has_subscription": True,
                "expires_at": subscription["expires_at"].isoformat(),
                "days_left": days_left,
                "active": True
            })
        else:
            return jsonify({
                "has_subscription": False,
                "active": False
            })
    
    except Exception as e:
        logger.error(f"üö® Error in subscription_status: {str(e)}")
        return jsonify({"error": f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ —Å—Ç–∞—Ç—É—Å—É –ø—ñ–¥–ø–∏—Å–∫–∏: {str(e)}"}), 500

# ==============================================
# –Ü–ù–Ü–¶–Ü–ê–õ–Ü–ó–ê–¶–Ü–Ø –¢–ê –ó–ê–ü–£–°–ö
# ==============================================

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—ó –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É
if db is not None:
    init_payment_monitor()

if __name__ == "__main__":
    logger.info("üöÄ Starting PantelMed Platform...")
    logger.info(f"üìÅ Working directory: {os.getcwd()}")
    
    port = int(os.environ.get("PORT", 10000))
    logger.info(f"üì° Server will run on port: {port}")
    logger.info(f"üíæ MongoDB: {'Connected' if db else 'Disconnected'}")
    logger.info(f"üîó TRON Wallet: {TRON_WALLET}")
    logger.info(f"ü§ñ Telegram Bot: @{TELEGRAM_BOT_USERNAME}")
    logger.info(f"üîÑ Payment Monitor: {'Enabled' if payment_monitor else 'Disabled'}")
    
    try:
        app.run(host="0.0.0.0", port=port, debug=False)
    except Exception as e:
        logger.error(f"‚ùå Server failed to start: {e}")
        raise
