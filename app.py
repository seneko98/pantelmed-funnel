from flask import Flask, jsonify, request, send_from_directory
from flask_cors import CORS
import requests
from datetime import datetime, timedelta
from pymongo import MongoClient
from pymongo.errors import ConnectionFailure, OperationFailure, ServerSelectionTimeoutError
import hashlib
import os

app = Flask(__name__)
CORS(app)  # –î–æ–∑–≤–æ–ª—è—î–º–æ CORS –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥—É

# –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è
TRON_WALLET = "TQeHa8VdwfyybxtioW4ggbnDC1rbWe8nFa"
MIN_AMOUNT = 2.6
MIN_AMOUNT_TEST = 0.5  # –î–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º—É
SUBSCRIPTION_DAYS = 30  # –¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å –ø—ñ–¥–ø–∏—Å–∫–∏

# MongoDB –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è (–ö–ê–ö –£ –ü–†–ê–¶–Æ–Æ–ß–û–ú–£ –ë–û–¢–Ü)
MONGO_URI = "mongodb+srv://Vlad:manreds7@cluster0.d0qnz.mongodb.net/pantelmed?retryWrites=true&w=majority&appName=Cluster0"

def init_mongodb():
    """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è MongoDB (—Å–ø—Ä–æ—â–µ–Ω–∞ –≤–µ—Ä—Å—ñ—è —è–∫ —É –±–æ—Ç—ñ)"""
    try:
        print("üîó Connecting to MongoDB (bot version)...")
        
        # –°–ø—Ä–æ—â–µ–Ω–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –ë–ï–ó SSL –∫–æ–Ω—Ñ–ª—ñ–∫—Ç—ñ–≤
        client = MongoClient(
            MONGO_URI,
            serverSelectionTimeoutMS=10000,
            connectTimeoutMS=15000,
            socketTimeoutMS=20000
        )
        
        # –¢–µ—Å—Ç—É—î–º–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
        client.admin.command('ping')
        print("‚úÖ MongoDB connection successful!")
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –±–∞–∑—É –¥–∞–Ω–∏—Ö
        db = client["pantelmed"]
        
        # –ü—Ä–æ—Å—Ç–∏–π —Ç–µ—Å—Ç –¥–æ—Å—Ç—É–ø—É
        try:
            collections = db.list_collection_names()
            print(f"‚úÖ Database access successful! Collections: {collections}")
        except Exception as e:
            print(f"‚ö†Ô∏è Collection list failed but connection works: {e}")
        
        return client, db
        
    except Exception as e:
        print(f"‚ùå MongoDB connection failed: {e}")
        print(f"‚ùå Error type: {type(e).__name__}")
        return None, None

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è MongoDB
print("üöÄ Initializing MongoDB connection...")
mongo_client, db = init_mongodb()

if mongo_client is None or db is None:
    print("üö® CRITICAL: MongoDB connection failed! Check logs above.")
    print("üö® Server will start but database operations will fail.")
    # –°—Ç–≤–æ—Ä—é—î–º–æ mock objects —â–æ–± —Å–µ—Ä–≤–µ—Ä –Ω–µ –ø–∞–¥–∞–≤
    users_collection = None
    transactions_collection = None
    subscriptions_collection = None
else:
    print("‚úÖ MongoDB ready for use!")
    # –ö–æ–ª–µ–∫—Ü—ñ—ó MongoDB
    users_collection = db["users"]
    transactions_collection = db["transactions"] 
    subscriptions_collection = db["subscriptions"]

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –±–µ–∑–ø–µ—á–Ω–∏—Ö –æ–ø–µ—Ä–∞—Ü—ñ–π –∑ MongoDB
def safe_db_operation(operation_name, operation_func):
    """–ë–µ–∑–ø–µ—á–Ω–µ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –æ–ø–µ—Ä–∞—Ü—ñ–π –∑ –±–∞–∑–æ—é –¥–∞–Ω–∏—Ö"""
    try:
        if db is None:
            print(f"‚ùå {operation_name}: Database not connected")
            return None
        return operation_func()
    except Exception as e:
        print(f"‚ùå {operation_name} failed: {e}")
        return None

def generate_payment_id(user_id):
    """–ì–µ–Ω–µ—Ä—É—î–º–æ —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π ID –¥–ª—è –ø–ª–∞—Ç–µ–∂—É"""
    return hashlib.md5(f"{user_id}_{datetime.utcnow().isoformat()}".encode()).hexdigest()[:12]

# –†–æ—É—Ç–∏ –¥–ª—è —Å—Ç–∞—Ç–∏—á–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤ (HTML, CSS, JS)
@app.route('/')
def serve_index():
    """–ì–æ–ª–æ–≤–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞"""
    return send_from_directory('.', 'index.html')

@app.route('/<path:filename>')
def serve_static(filename):
    """–í—ñ–¥–¥–∞—î–º–æ —Å—Ç–∞—Ç–∏—á–Ω—ñ —Ñ–∞–π–ª–∏ (HTML, CSS)"""
    return send_from_directory('.', filename)

# Debug endpoint
@app.route("/debug-tron", methods=["GET"])
def debug_tron():
    """Debug endpoint –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ TRON API"""
    try:
        url = f"https://api.trongrid.io/v1/accounts/{TRON_WALLET}/transactions/trc20?limit=5"
        headers = {"accept": "application/json"}
        
        response = requests.get(url, headers=headers, timeout=15)
        response.raise_for_status()
        data = response.json()
        
        # –§–æ—Ä–º–∞—Ç—É—î–º–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó –¥–ª—è —á–∏—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—ñ
        formatted_transactions = []
        recent_time = datetime.utcnow() - timedelta(minutes=60)
        
        for tx in data.get("data", []):
            amount = int(tx.get("value", "0")) / (10 ** 6)
            timestamp = datetime.fromtimestamp(tx["block_timestamp"] / 1000)
            is_recent = timestamp > recent_time
            formatted_transactions.append({
                "amount": amount,
                "timestamp": timestamp.isoformat(),
                "tx_id": tx.get("transaction_id", "")[:16] + "...",
                "is_recent": is_recent,
                "matches_criteria": amount >= MIN_AMOUNT and is_recent
            })
        
        return jsonify({
            "status": "ok",
            "wallet": TRON_WALLET,
            "transactions_count": len(formatted_transactions),
            "transactions": formatted_transactions,
            "min_amount_required": MIN_AMOUNT,
            "min_amount_test": MIN_AMOUNT_TEST,
            "search_from": recent_time.isoformat()
        })
        
    except Exception as e:
        return jsonify({
            "status": "error",
            "error": str(e),
            "wallet": TRON_WALLET
        }), 500

# API endpoints
@app.route("/create-payment", methods=["POST"])
def create_payment():
    """–°—Ç–≤–æ—Ä—é—î–º–æ –∑–∞–ø–∏—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    try:
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ MongoDB
        if db is None:
            return jsonify({"error": "Database connection failed"}), 500
        
        data = request.get_json()
        user_id = data.get("user_id")
        test_mode = data.get("test_mode", False)
        
        if not user_id:
            return jsonify({"error": "user_id –æ–±–æ–≤'—è–∑–∫–æ–≤–∏–π"}), 400
        
        print(f"üí≥ Creating payment for user: {user_id}, test_mode: {test_mode}")
        
        # –í–∏–∑–Ω–∞—á–∞—î–º–æ –º—ñ–Ω—ñ–º–∞–ª—å–Ω—É —Å—É–º—É
        min_amount = MIN_AMOUNT_TEST if test_mode else MIN_AMOUNT
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π payment_id –¥–ª—è —Ü—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        payment_id = generate_payment_id(user_id)
        
        # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Ç–∞ –æ—á—ñ–∫—É–≤–∞–Ω–∏–π –ø–ª–∞—Ç—ñ–∂
        user_data = {
            "user_id": user_id,
            "payment_id": payment_id,
            "amount_expected": min_amount,
            "wallet_address": TRON_WALLET,
            "created_at": datetime.utcnow(),
            "payment_completed": False,
            "test_mode": test_mode
        }
        
        # –û–Ω–æ–≤–ª—é—î–º–æ –∞–±–æ —Å—Ç–≤–æ—Ä—é—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ error handling
        update_result = safe_db_operation(
            "Update/create user payment",
            lambda: users_collection.update_one(
                {"user_id": user_id},
                {"$set": user_data},
                upsert=True
            )
        )
        
        if not update_result:
            return jsonify({"error": "Failed to create payment request"}), 500
        
        print(f"‚úÖ Payment request created: {payment_id}")
        
        return jsonify({
            "payment_id": payment_id,
            "wallet_address": TRON_WALLET,
            "amount": min_amount,
            "currency": "USDT (TRC-20)",
            "test_mode": test_mode
        })
    
    except Exception as e:
        print(f"üö® Error in create_payment: {str(e)}")
        import traceback
        traceback.print_exc()
        return jsonify({"error": f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –ø–ª–∞—Ç–µ–∂—É: {str(e)}"}), 500

@app.route("/check-payment", methods=["POST"])
def check_payment():
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –Ω–∞–¥—ñ–π—à–ª–∞ –æ–ø–ª–∞—Ç–∞ –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (–±—Ä–∞—É–∑–µ—Ä–Ω–∏–π ID)"""
    try:
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ MongoDB
        if db is None:
            return jsonify({"error": "Database connection failed"}), 500
        
        data = request.get_json()
        user_id = data.get("user_id")
        test_mode = data.get("test_mode", False)
        
        if not user_id:
            return jsonify({"error": "user_id –æ–±–æ–≤'—è–∑–∫–æ–≤–∏–π"}), 400
        
        print(f"üîç Checking payment for user: {user_id}, test_mode: {test_mode}")
        
        # –í–∏–∑–Ω–∞—á–∞—î–º–æ –º—ñ–Ω—ñ–º–∞–ª—å–Ω—É —Å—É–º—É
        min_amount = MIN_AMOUNT_TEST if test_mode else MIN_AMOUNT
        
        # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ error handling
        user = safe_db_operation(
            "Find user", 
            lambda: users_collection.find_one({"user_id": user_id})
        )
        
        if user is None:
            # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —è–∫—â–æ –Ω–µ —ñ—Å–Ω—É—î
            user_data = {
                "user_id": user_id,
                "created_at": datetime.utcnow(),
                "payment_completed": False
            }
            insert_result = safe_db_operation(
                "Create user",
                lambda: users_collection.insert_one(user_data)
            )
            if insert_result:
                user = user_data
                print(f"‚úÖ Created new user: {user_id}")
            else:
                return jsonify({"error": "Failed to create user"}), 500
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –≤–∂–µ —î –∞–∫—Ç–∏–≤–Ω–∞ –ø—ñ–¥–ø–∏—Å–∫–∞
        active_subscription = safe_db_operation(
            "Find active subscription",
            lambda: subscriptions_collection.find_one({
                "user_id": user_id,
                "expires_at": {"$gt": datetime.utcnow()},
                "active": True
            })
        )
        
        if active_subscription:
            days_left = (active_subscription["expires_at"] - datetime.utcnow()).days
            print(f"‚úÖ Active subscription found for user {user_id}, days left: {days_left}")
            return jsonify({
                "access": "granted",
                "subscription": {
                    "expires_at": active_subscription["expires_at"].isoformat(),
                    "days_left": days_left
                }
            })
        
        # –®—É–∫–∞—î–º–æ –Ω–æ–≤—ñ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó –≤ TRON blockchain
        url = f"https://api.trongrid.io/v1/accounts/{TRON_WALLET}/transactions/trc20?limit=20"
        headers = {"accept": "application/json"}
        
        response = requests.get(url, headers=headers, timeout=15)
        response.raise_for_status()
        data_response = response.json()
        
        print(f"üì° TRON API Response: {len(data_response.get('data', []))} transactions found")
        
        # –ß–∞—Å–æ–≤–∏–π –¥—ñ–∞–ø–∞–∑–æ–Ω –¥–ª—è –ø–æ—à—É–∫—É (–æ—Å—Ç–∞–Ω–Ω—ñ 60 —Ö–≤–∏–ª–∏–Ω)
        recent_time = datetime.utcnow() - timedelta(minutes=60)
        user_created_time = user.get("created_at", recent_time)
        search_from = max(recent_time, user_created_time)
        
        print(f"üîç Searching transactions from: {search_from}")
        print(f"üí∞ Looking for amount >= {min_amount} USDT")
        
        for tx in data_response.get("data", []):
            tx_id = tx.get("transaction_id")
            value = int(tx.get("value", "0")) / (10 ** 6)
            tx_timestamp = datetime.fromtimestamp(tx["block_timestamp"] / 1000)
            
            print(f"üîé Checking transaction: {value} USDT at {tx_timestamp}")
            
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—è –≤–∂–µ –æ–±—Ä–æ–±–ª–µ–Ω–∞
            existing_tx = safe_db_operation(
                "Check existing transaction",
                lambda: transactions_collection.find_one({"tx_id": tx_id})
            )
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —É–º–æ–≤–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó
            if (value >= min_amount and 
                tx_timestamp > search_from and
                not existing_tx):
                
                print(f"‚úÖ Found matching transaction: {value} USDT, tx_id: {tx_id}")
                
                # –ó–∞–ø–∏—Å—É—î–º–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é
                transaction_data = {
                    "tx_id": tx_id,
                    "user_id": user_id,
                    "amount": value,
                    "timestamp": tx_timestamp,
                    "processed": True,
                    "created_at": datetime.utcnow(),
                    "test_mode": test_mode
                }
                
                tx_insert = safe_db_operation(
                    "Insert transaction",
                    lambda: transactions_collection.insert_one(transaction_data)
                )
                
                if not tx_insert:
                    return jsonify({"error": "Failed to record transaction"}), 500
                
                # –°—Ç–≤–æ—Ä—é—î–º–æ –ø—ñ–¥–ø–∏—Å–∫—É
                expires_at = datetime.utcnow() + timedelta(days=SUBSCRIPTION_DAYS)
                subscription_data = {
                    "user_id": user_id,
                    "tx_id": tx_id,
                    "starts_at": datetime.utcnow(),
                    "expires_at": expires_at,
                    "active": True,
                    "created_at": datetime.utcnow(),
                    "test_mode": test_mode
                }
                
                sub_insert = safe_db_operation(
                    "Insert subscription",
                    lambda: subscriptions_collection.insert_one(subscription_data)
                )
                
                if not sub_insert:
                    return jsonify({"error": "Failed to create subscription"}), 500
                
                # –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
                user_update = safe_db_operation(
                    "Update user",
                    lambda: users_collection.update_one(
                        {"user_id": user_id},
                        {"$set": {"payment_completed": True, "last_payment_at": datetime.utcnow()}}
                    )
                )
                
                print(f"‚úÖ Subscription created for user {user_id}")
                
                return jsonify({
                    "access": "granted",
                    "subscription": {
                        "expires_at": expires_at.isoformat(),
                        "days_left": SUBSCRIPTION_DAYS
                    },
                    "transaction": {
                        "amount": value,
                        "tx_id": tx_id
                    }
                })
        
        print(f"‚ùå No matching transactions found (need >= {min_amount} USDT)")
        
        return jsonify({
            "access": "denied", 
            "message": f"–ü–ª–∞—Ç—ñ–∂ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π. –ù–∞–¥—ñ—à–ª—ñ—Ç—å {min_amount} USDT —ñ —Å–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –∫—ñ–ª—å–∫–∞ —Ö–≤–∏–ª–∏–Ω."
        })
        
    except requests.RequestException as e:
        print(f"üö® TRON API error: {str(e)}")
        return jsonify({"error": f"–ü–æ–º–∏–ª–∫–∞ –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ TRON API: {str(e)}"}), 500
    except Exception as e:
        print(f"üö® General error in check_payment: {str(e)}")
        import traceback
        traceback.print_exc()
        return jsonify({"error": f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ –ø–ª–∞—Ç–µ–∂—É: {str(e)}"}), 500

@app.route("/subscription-status", methods=["POST"])
def subscription_status():
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—Ç–∞—Ç—É—Å –ø—ñ–¥–ø–∏—Å–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    try:
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ MongoDB
        if db is None:
            return jsonify({"error": "Database connection failed"}), 500
        
        data = request.get_json()
        user_id = data.get("user_id")
        
        if not user_id:
            return jsonify({"error": "user_id –æ–±–æ–≤'—è–∑–∫–æ–≤–∏–π"}), 400
        
        print(f"üîç Checking subscription status for user: {user_id}")
        
        # –®—É–∫–∞—î–º–æ –∞–∫—Ç–∏–≤–Ω—É –ø—ñ–¥–ø–∏—Å–∫—É –∑ error handling
        subscription = safe_db_operation(
            "Find subscription",
            lambda: subscriptions_collection.find_one({
                "user_id": user_id,
                "expires_at": {"$gt": datetime.utcnow()},
                "active": True
            })
        )
        
        if subscription:
            days_left = (subscription["expires_at"] - datetime.utcnow()).days
            print(f"‚úÖ Active subscription found, days left: {days_left}")
            return jsonify({
                "has_subscription": True,
                "expires_at": subscription["expires_at"].isoformat(),
                "days_left": days_left,
                "active": True
            })
        else:
            print(f"‚ùå No active subscription found for user {user_id}")
            return jsonify({
                "has_subscription": False,
                "active": False
            })
    
    except Exception as e:
        print(f"üö® Error in subscription_status: {str(e)}")
        import traceback
        traceback.print_exc()
        return jsonify({"error": f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ —Å—Ç–∞—Ç—É—Å—É –ø—ñ–¥–ø–∏—Å–∫–∏: {str(e)}"}), 500

@app.route("/health", methods=["GET"])
def health():
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤'—è —Å–µ—Ä–≤–µ—Ä–∞ –∑ –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–æ—é MongoDB"""
    mongodb_status = "connected" if db is not None else "disconnected"
    
    # –¢–µ—Å—Ç—É—î–º–æ MongoDB —è–∫—â–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω–∞
    mongodb_test = False
    if db is not None:
        try:
            # –ü—Ä–æ—Å—Ç–∏–π —Ç–µ—Å—Ç - –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –∫–æ–ª–µ–∫—Ü—ñ—ó
            collections = db.list_collection_names()
            mongodb_test = True
        except Exception as e:
            print(f"MongoDB health check failed: {e}")
            mongodb_test = False
    
    return jsonify({
        "status": "ok", 
        "version": "PANTELMED_PAYMENT_SYSTEM_2024_MONGODB_WORKING",
        "timestamp": datetime.utcnow().isoformat(),
        "endpoints": ["/health", "/subscription-status", "/check-payment", "/create-payment", "/debug-tron"],
        "mongodb": {
            "status": mongodb_status,
            "connection_test": mongodb_test,
            "uri": MONGO_URI.replace("manreds7", "***") if MONGO_URI else "not set"
        },
        "tron_wallet": TRON_WALLET
    })

if __name__ == "__main__":
    print("üöÄ Starting PantelMed Flask server...")
    print(f"üìÅ Working directory: {os.getcwd()}")
    print(f"üìÇ Files in directory: {os.listdir('.')}")
    
    port = int(os.environ.get("PORT", 10000))
    print(f"üì° Server will run on port: {port}")
    print(f"üåê Host: 0.0.0.0")
    print(f"üíæ MongoDB URI configured: {'Yes' if MONGO_URI else 'No'}")
    print(f"üîó TRON Wallet: {TRON_WALLET}")
    
    try:
        print("‚ö° Starting Flask application...")
        app.run(host="0.0.0.0", port=port, debug=False)
        print("‚úÖ Server started successfully!")
    except Exception as e:
        print(f"‚ùå Server failed to start: {e}")
        import traceback
        traceback.print_exc()
        raise
