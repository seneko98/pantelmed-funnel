#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
PantelMed Platform - Startup Script
–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å–∏—Å—Ç–µ–º–∏
"""

import os
import sys
import subprocess
import json
import time
from pathlib import Path
from urllib.parse import urlparse
import requests

# –ö–æ–ª—å–æ—Ä–æ–≤—ñ –≤–∏–≤–æ–¥–∏
class Colors:
    GREEN = '\033[92m'
    RED = '\033[91m'
    YELLOW = '\033[93m'
    BLUE = '\033[94m'
    MAGENTA = '\033[95m'
    CYAN = '\033[96m'
    WHITE = '\033[97m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'

def print_colored(message, color=Colors.WHITE):
    """–ö–æ–ª—å–æ—Ä–æ–≤–∏–π –≤–∏–≤—ñ–¥"""
    print(f"{color}{message}{Colors.ENDC}")

def print_header(title):
    """–ö—Ä–∞—Å–∏–≤–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫"""
    print_colored("\n" + "="*60, Colors.CYAN)
    print_colored(f"üè• PantelMed Platform - {title}", Colors.BOLD + Colors.CYAN)
    print_colored("="*60, Colors.CYAN)

def print_step(step_num, description):
    """–ö—Ä–æ–∫ –∑ –Ω—É–º–µ—Ä–∞—Ü—ñ—î—é"""
    print_colored(f"\nüìã –ö—Ä–æ–∫ {step_num}: {description}", Colors.BLUE)

def print_success(message):
    """–£—Å–ø—ñ—à–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"""
    print_colored(f"‚úÖ {message}", Colors.GREEN)

def print_error(message):
    """–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É"""
    print_colored(f"‚ùå {message}", Colors.RED)

def print_warning(message):
    """–ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è"""
    print_colored(f"‚ö†Ô∏è  {message}", Colors.YELLOW)

def print_info(message):
    """–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ–π–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"""
    print_colored(f"‚ÑπÔ∏è  {message}", Colors.CYAN)

def check_python_version():
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤–µ—Ä—Å—ñ—ó Python"""
    print_step(1, "–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤–µ—Ä—Å—ñ—ó Python")
    
    version = sys.version_info
    if version.major >= 3 and version.minor >= 8:
        print_success(f"Python {version.major}.{version.minor}.{version.micro} ‚úì")
        return True
    else:
        print_error(f"–ü–æ—Ç—Ä—ñ–±–µ–Ω Python 3.8+, –∑–Ω–∞–π–¥–µ–Ω–æ {version.major}.{version.minor}.{version.micro}")
        return False

def check_required_files():
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –æ–±–æ–≤'—è–∑–∫–æ–≤–∏—Ö —Ñ–∞–π–ª—ñ–≤"""
    print_step(2, "–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ñ–∞–π–ª—ñ–≤ –ø—Ä–æ–µ–∫—Ç—É")
    
    required_files = [
        'app.py',
        'requirements.txt',
        'index.html',
        'shop.html',
        'style.css',
        '.env.example'
    ]
    
    missing_files = []
    for file in required_files:
        if Path(file).exists():
            print_success(f"{file} ‚úì")
        else:
            print_error(f"{file} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
            missing_files.append(file)
    
    if missing_files:
        print_error(f"–í—ñ–¥—Å—É—Ç–Ω—ñ —Ñ–∞–π–ª–∏: {', '.join(missing_files)}")
        return False
    
    return True

def check_environment_file():
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ .env —Ñ–∞–π–ª—É"""
    print_step(3, "–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞")
    
    if not Path('.env').exists():
        print_warning(".env —Ñ–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        
        response = input("üîß –°—Ç–≤–æ—Ä–∏—Ç–∏ .env —Ñ–∞–π–ª –∑ .env.example? (y/n): ").lower()
        if response == 'y':
            try:
                with open('.env.example', 'r', encoding='utf-8') as src:
                    content = src.read()
                with open('.env', 'w', encoding='utf-8') as dst:
                    dst.write(content)
                print_success(".env —Ñ–∞–π–ª —Å—Ç–≤–æ—Ä–µ–Ω–æ")
                print_warning("‚ö†Ô∏è  –í–ê–ñ–õ–ò–í–û: –í—ñ–¥—Ä–µ–¥–∞–≥—É–π—Ç–µ .env —Ñ–∞–π–ª –∑ –≤–∞—à–∏–º–∏ –¥–∞–Ω–∏–º–∏!")
                return False  # –ü–æ—Ç—Ä—ñ–±–Ω–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏
            except Exception as e:
                print_error(f"–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è .env: {e}")
                return False
        else:
            print_error("–ù–µ–º–æ–∂–ª–∏–≤–æ –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –±–µ–∑ .env —Ñ–∞–π–ª—É")
            return False
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω–∏—Ö –∑–º—ñ–Ω–Ω–∏—Ö
    required_vars = [
        'MONGO_URI',
        'TELEGRAM_BOT_TOKEN',
        'TRON_WALLET',
        'ADMIN_PASSWORD'
    ]
    
    try:
        from dotenv import load_dotenv
        load_dotenv()
        
        missing_vars = []
        for var in required_vars:
            value = os.getenv(var)
            if not value or 'your_' in value.lower() or 'change_this' in value.lower():
                missing_vars.append(var)
                print_error(f"{var} –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ")
            else:
                print_success(f"{var} ‚úì")
        
        if missing_vars:
            print_error(f"–ù–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω—ñ –∑–º—ñ–Ω–Ω—ñ: {', '.join(missing_vars)}")
            print_info("–í—ñ–¥—Ä–µ–¥–∞–≥—É–π—Ç–µ .env —Ñ–∞–π–ª –∑ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–º–∏ –∑–Ω–∞—á–µ–Ω–Ω—è–º–∏")
            return False
        
        return True
        
    except ImportError:
        print_warning("python-dotenv –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É .env")
        return True

def install_dependencies():
    """–í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π"""
    print_step(4, "–í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è Python –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π")
    
    try:
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤—ñ—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
        if hasattr(sys, 'real_prefix') or (hasattr(sys, 'base_prefix') and sys.base_prefix != sys.prefix):
            print_success("–í—ñ—Ä—Ç—É–∞–ª—å–Ω–µ —Å–µ—Ä–µ–¥–æ–≤–∏—â–µ –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ ‚úì")
        else:
            print_warning("–í—ñ—Ä—Ç—É–∞–ª—å–Ω–µ —Å–µ—Ä–µ–¥–æ–≤–∏—â–µ –Ω–µ –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ")
            response = input("–ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –±–µ–∑ venv? (y/n): ").lower()
            if response != 'y':
                print_info("–°—Ç–≤–æ—Ä—ñ—Ç—å —Ç–∞ –∞–∫—Ç–∏–≤—É–π—Ç–µ venv:")
                print_info("python -m venv venv")
                print_info("source venv/bin/activate  # Linux/Mac")
                print_info("venv\\Scripts\\activate     # Windows")
                return False
        
        # –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π
        print_info("–í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π...")
        result = subprocess.run([sys.executable, '-m', 'pip', 'install', '-r', 'requirements.txt'], 
                              capture_output=True, text=True)
        
        if result.returncode == 0:
            print_success("–ó–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ ‚úì")
            return True
        else:
            print_error(f"–ü–æ–º–∏–ª–∫–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è: {result.stderr}")
            return False
            
    except Exception as e:
        print_error(f"–ü–æ–º–∏–ª–∫–∞: {e}")
        return False

def test_database_connection():
    """–¢–µ—Å—Ç –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ MongoDB"""
    print_step(5, "–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ MongoDB")
    
    try:
        from dotenv import load_dotenv
        load_dotenv()
        
        mongo_uri = os.getenv('MONGO_URI')
        if not mongo_uri or 'your_' in mongo_uri:
            print_warning("MONGO_URI –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ —Ç–µ—Å—Ç")
            return True
        
        from pymongo import MongoClient
        from pymongo.errors import ConnectionFailure
        
        print_info("–ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ MongoDB...")
        client = MongoClient(mongo_uri, serverSelectionTimeoutMS=5000)
        client.admin.command('ping')
        
        print_success("MongoDB –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–µ ‚úì")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø—É –¥–æ –±–∞–∑–∏
        db_name = urlparse(mongo_uri).path.lstrip('/')
        if db_name:
            db = client[db_name]
            collections = db.list_collection_names()
            print_info(f"–ë–∞–∑–∞ –¥–∞–Ω–∏—Ö: {db_name}, –∫–æ–ª–µ–∫—Ü—ñ–π: {len(collections)}")
        
        client.close()
        return True
        
    except ImportError:
        print_warning("pymongo –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ —Ç–µ—Å—Ç MongoDB")
        return True
    except ConnectionFailure:
        print_error("–ù–µ –≤–¥–∞–ª–æ—Å—è –ø—ñ–¥–∫–ª—é—á–∏—Ç–∏—Å—è –¥–æ MongoDB")
        print_info("–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ MONGO_URI —Ç–∞ –¥–æ—Å—Ç—É–ø –¥–æ –º–µ—Ä–µ–∂—ñ")
        return False
    except Exception as e:
        print_error(f"–ü–æ–º–∏–ª–∫–∞ MongoDB: {e}")
        return False

def test_telegram_bot():
    """–¢–µ—Å—Ç Telegram –±–æ—Ç–∞"""
    print_step(6, "–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è Telegram –±–æ—Ç–∞")
    
    try:
        from dotenv import load_dotenv
        load_dotenv()
        
        bot_token = os.getenv('TELEGRAM_BOT_TOKEN')
        if not bot_token or 'your_' in bot_token:
            print_warning("TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ —Ç–µ—Å—Ç")
            return True
        
        print_info("–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è Telegram Bot API...")
        response = requests.get(f"https://api.telegram.org/bot{bot_token}/getMe", timeout=10)
        
        if response.status_code == 200:
            data = response.json()
            if data.get('ok'):
                bot_info = data['result']
                print_success(f"Telegram –±–æ—Ç –∞–∫—Ç–∏–≤–Ω–∏–π: @{bot_info['username']} ‚úì")
                return True
            else:
                print_error(f"Telegram API –ø–æ–º–∏–ª–∫–∞: {data}")
                return False
        else:
            print_error(f"HTTP –ø–æ–º–∏–ª–∫–∞: {response.status_code}")
            return False
            
    except ImportError:
        print_warning("requests –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ —Ç–µ—Å—Ç Telegram")
        return True
    except Exception as e:
        print_error(f"–ü–æ–º–∏–ª–∫–∞ Telegram: {e}")
        return False

def test_tron_api():
    """–¢–µ—Å—Ç TRON API"""
    print_step(7, "–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è TRON API")
    
    try:
        from dotenv import load_dotenv
        load_dotenv()
        
        tron_wallet = os.getenv('TRON_WALLET')
        if not tron_wallet or 'your_' in tron_wallet:
            print_warning("TRON_WALLET –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ —Ç–µ—Å—Ç")
            return True
        
        print_info("–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è TRON API...")
        url = f"https://api.trongrid.io/v1/accounts/{tron_wallet}/transactions/trc20?limit=1"
        response = requests.get(url, timeout=10)
        
        if response.status_code == 200:
            data = response.json()
            print_success("TRON API –¥–æ—Å—Ç—É–ø–Ω–∏–π ‚úì")
            print_info(f"–ì–∞–º–∞–Ω–µ—Ü—å: {tron_wallet[:10]}...{tron_wallet[-10:]}")
            return True
        else:
            print_error(f"TRON API –ø–æ–º–∏–ª–∫–∞: {response.status_code}")
            return False
            
    except Exception as e:
        print_error(f"–ü–æ–º–∏–ª–∫–∞ TRON API: {e}")
        return False

def start_application():
    """–ó–∞–ø—É—Å–∫ –¥–æ–¥–∞—Ç–∫–∞"""
    print_step(8, "–ó–∞–ø—É—Å–∫ PantelMed Platform")
    
    try:
        print_info("–ó–∞–ø—É—Å–∫ Flask –¥–æ–¥–∞—Ç–∫–∞...")
        print_info("URL: http://localhost:10000")
        print_info("–ê–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—å: http://localhost:10000/admin")
        print_info("–î–ª—è –∑—É–ø–∏–Ω–∫–∏ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å Ctrl+C")
        
        # –ó–∞–ø—É—Å–∫ –∑ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–º –ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è–º –≤ dev —Ä–µ–∂–∏–º—ñ
        os.environ['FLASK_ENV'] = 'development'
        os.environ['FLASK_DEBUG'] = 'True'
        
        subprocess.run([sys.executable, 'app.py'])
        
    except KeyboardInterrupt:
        print_info("\nüëã –î–æ–¥–∞—Ç–æ–∫ –∑—É–ø–∏–Ω–µ–Ω–æ")
    except Exception as e:
        print_error(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É: {e}")

def show_quick_commands():
    """–ü–æ–∫–∞–∑–∞—Ç–∏ –∫–æ—Ä–∏—Å–Ω—ñ –∫–æ–º–∞–Ω–¥–∏"""
    print_header("–ö–æ—Ä–∏—Å–Ω—ñ –∫–æ–º–∞–Ω–¥–∏")
    
    commands = [
        ("üöÄ –ó–∞–ø—É—Å–∫ –¥–æ–¥–∞—Ç–∫–∞", "python app.py"),
        ("ü§ñ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞", "python telegram_bot.py"),
        ("üê≥ Docker –∑–∞–ø—É—Å–∫", "docker-compose up -d"),
        ("üß™ –¢–µ—Å—Ç –∑–¥–æ—Ä–æ–≤'—è", "curl http://localhost:10000/health"),
        ("üìä –ê–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—å", "http://localhost:10000/admin"),
        ("üõí –ú–∞–≥–∞–∑–∏–Ω –ë–ê–î—ñ–≤", "http://localhost:10000/shop.html"),
        ("üìù –õ–æ–≥–∏ Docker", "docker-compose logs -f"),
        ("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫", "docker-compose restart"),
    ]
    
    for desc, cmd in commands:
        print_colored(f"{desc:<25} {Colors.CYAN}{cmd}{Colors.ENDC}", Colors.WHITE)

def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è"""
    print_header("Startup Script")
    print_info("–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è PantelMed Platform")
    
    # –í–∏–∫–æ–Ω—É—î–º–æ –≤—Å—ñ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
    checks = [
        check_python_version,
        check_required_files,
        check_environment_file,
        install_dependencies,
        test_database_connection,
        test_telegram_bot,
        test_tron_api
    ]
    
    failed_checks = 0
    for check in checks:
        if not check():
            failed_checks += 1
    
    print_header("–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏")
    
    if failed_checks == 0:
        print_success("üéâ –í—Å—ñ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!")
        print_info("–°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –¥–æ –∑–∞–ø—É—Å–∫—É")
        
        response = input("\nüöÄ –ó–∞–ø—É—Å—Ç–∏—Ç–∏ –¥–æ–¥–∞—Ç–æ–∫ –∑–∞—Ä–∞–∑? (y/n): ").lower()
        if response == 'y':
            start_application()
        else:
            show_quick_commands()
            
    elif failed_checks <= 2:
        print_warning(f"‚ö†Ô∏è  {failed_checks} –ø–µ—Ä–µ–≤—ñ—Ä–æ–∫ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–æ")
        print_info("–°–∏—Å—Ç–µ–º–∞ —á–∞—Å—Ç–∫–æ–≤–æ –≥–æ—Ç–æ–≤–∞, –º–æ–∂–Ω–∞ —Å–ø—Ä–æ–±—É–≤–∞—Ç–∏ –∑–∞–ø—É—Å–∫")
        show_quick_commands()
        
    else:
        print_error(f"‚ùå {failed_checks} –∫—Ä–∏—Ç–∏—á–Ω–∏—Ö –ø–æ–º–∏–ª–æ–∫")
        print_info("–í–∏–ø—Ä–∞–≤—Ç–µ –ø–æ–º–∏–ª–∫–∏ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º")
        print_info("\nüìñ –î–µ—Ç–∞–ª—å–Ω—ñ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó:")
        print_info("- README.md - –ó–∞–≥–∞–ª—å–Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—è")
        print_info("- DEPLOYMENT_GUIDE.md - –ì–∞–π–¥ –ø–æ —Ä–æ–∑–≥–æ—Ä—Ç–∞–Ω–Ω—é")
        print_info("- .env.example - –ü—Ä–∏–∫–ª–∞–¥ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó")

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print_info("\nüëã –°–∫—Ä–∏–ø—Ç –ø–µ—Ä–µ—Ä–≤–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º")
    except Exception as e:
        print_error(f"–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
        sys.exit(1)
