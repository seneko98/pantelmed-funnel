import React, { useState, useEffect } from 'react';
import { ShoppingCart, Search, Plus, Minus, X, Star, Package, ArrowLeft } from 'lucide-react';

// –¢–æ–≤–∞—Ä–∏ –ë–ê–î—ñ–≤ (4 —Ç–æ–≤–∞—Ä–∏, —Ü—ñ–Ω–∏ —â–æ–± –º–æ–∂–Ω–∞ –±—É–ª–æ –¥–æ—Å—è–≥—Ç–∏ 2.6)
const PRODUCTS = [
  {
    id: "zinc_50",
    name: "–¶–∏–Ω–∫ (50–º–≥)",
    price: 0.7,
    description: "–¶–∏–Ω–∫ –¥–ª—è —ñ–º—É–Ω—ñ—Ç–µ—Ç—É —Ç–∞ —Ç–µ—Å—Ç–æ—Å—Ç–µ—Ä–æ–Ω—É. –ü—ñ–¥—Ç—Ä–∏–º—É—î –∑–¥–æ—Ä–æ–≤'—è —à–∫—ñ—Ä–∏ —ñ –∑–∞–≥–æ—é–≤–∞–Ω–Ω—è —Ä–∞–Ω.",
    emoji: "üõ°Ô∏è",
    category: "–º—ñ–Ω–µ—Ä–∞–ª–∏",
    inStock: true,
    rating: 4.8,
    reviews: 124
  },
  {
    id: "vit_d3_2000",
    name: "–í—ñ—Ç–∞–º—ñ–Ω D3 (2000 IU)",
    price: 0.8,
    description: "–ù–∞–π–≤–∞–∂–ª–∏–≤—ñ—à–∏–π –≥–æ—Ä–º–æ–Ω–æ–ø–æ–¥—ñ–±–Ω–∏–π –≤—ñ—Ç–∞–º—ñ–Ω –¥–ª—è –∫—ñ—Å—Ç–æ–∫ —Ç–∞ —ñ–º—É–Ω—ñ—Ç–µ—Ç—É.",
    emoji: "‚òÄÔ∏è",
    category: "–≤—ñ—Ç–∞–º—ñ–Ω–∏",
    inStock: true,
    rating: 4.9,
    reviews: 89
  },
  {
    id: "omega3_1000",
    name: "–û–º–µ–≥–∞-3 (1000–º–≥)",
    price: 0.9,
    description: "–†–∏–± º—è—á–∏–π –∂–∏—Ä –≤–∏—Å–æ–∫–æ—ó —è–∫–æ—Å—Ç—ñ –¥–ª—è —Å–µ—Ä—Ü—è —Ç–∞ –º–æ–∑–∫—É.",
    emoji: "üêü",
    category: "–∂–∏—Ä–Ω—ñ –∫–∏—Å–ª–æ—Ç–∏",
    inStock: true,
    rating: 4.7,
    reviews: 156
  },
  {
    id: "magnesium_400",
    name: "–ú–∞–≥–Ω—ñ–π (400–º–≥)",
    price: 0.6,
    description: "–ú–∞–≥–Ω–∏–π –≥–ª–∏—Ü–∏–Ω–∞—Ç –¥–ª—è –Ω–µ—Ä–≤–æ–≤–æ—ó —Å–∏—Å—Ç–µ–º–∏ —Ç–∞ –∑–¥–æ—Ä–æ–≤–æ–≥–æ —Å–Ω—É.",
    emoji: "‚ö°",
    category: "–º—ñ–Ω–µ—Ä–∞–ª–∏",
    inStock: true,
    rating: 4.6,
    reviews: 73
  }
];

const CATEGORIES = ["–≤—Å—ñ", "–≤—ñ—Ç–∞–º—ñ–Ω–∏", "–º—ñ–Ω–µ—Ä–∞–ª–∏", "–∂–∏—Ä–Ω—ñ –∫–∏—Å–ª–æ—Ç–∏"];

// Cart Store –∑ useState
const useCartStore = () => {
  const [cart, setCart] = useState([]);

  const addToCart = (product) => {
    setCart(prev => {
      const existing = prev.find(item => item.id === product.id);
      if (existing) {
        return prev.map(item => 
          item.id === product.id 
            ? {...item, quantity: item.quantity + 1}
            : item
        );
      }
      return [...prev, {...product, quantity: 1}];
    });
  };

  const updateQuantity = (id, quantity) => {
    if (quantity <= 0) {
      removeFromCart(id);
      return;
    }
    setCart(prev => prev.map(item => 
      item.id === id ? {...item, quantity} : item
    ));
  };

  const removeFromCart = (id) => {
    setCart(prev => prev.filter(item => item.id !== id));
  };

  const clearCart = () => setCart([]);
  
  const getTotalPrice = () => {
    return cart.reduce((sum, item) => sum + (item.price * item.quantity), 0);
  };

  const getTotalItems = () => {
    return cart.reduce((sum, item) => sum + item.quantity, 0);
  };

  return {
    cart,
    addToCart,
    updateQuantity,
    removeFromCart,
    clearCart,
    getTotalPrice,
    getTotalItems
  };
};

// Telegram –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è (–±–∞–∑–æ–≤–∞ –≤–µ—Ä—Å—ñ—è)
const useTelegramAuth = () => {
  const [telegramUser, setTelegramUser] = useState(null);
  const [isAuthorized, setIsAuthorized] = useState(false);

  useEffect(() => {
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ URL –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ (–ø—Ä–∏—Ö—ñ–¥ –∑ –±–æ—Ç—É)
    const urlParams = new URLSearchParams(window.location.search);
    const telegramUserId = urlParams.get('user_id');
    
    if (telegramUserId) {
      // –°–∏–º—É–ª—é—î–º–æ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
      setTelegramUser({
        id: telegramUserId,
        first_name: '–¢–µ—Å—Ç',
        last_name: '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á',
        username: 'test_user'
      });
      setIsAuthorized(true);
    }

    // Telegram WebApp API (—è–∫—â–æ –¥–æ—Å—Ç—É–ø–Ω–∏–π)
    if (window.Telegram?.WebApp?.initDataUnsafe?.user) {
      const webAppUser = window.Telegram.WebApp.initDataUnsafe.user;
      setTelegramUser(webAppUser);
      setIsAuthorized(true);
    }
  }, []);

  const saveUserToCRM = async (user) => {
    // CRM –∑–∞–≥–ª—É—à–∫–∞
    try {
      console.log('üìä Saving user to CRM:', user);
      // await fetch('/api/crm/users', {
      //   method: 'POST',
      //   headers: { 'Content-Type': 'application/json' },
      //   body: JSON.stringify({
      //     telegram_id: user.id,
      //     name: `${user.first_name} ${user.last_name || ''}`.trim(),
      //     username: user.username,
      //     source: 'shop',
      //     registration_date: new Date().toISOString()
      //   })
      // });
    } catch (error) {
      console.error('CRM save error:', error);
    }
  };

  return { telegramUser, isAuthorized };
};

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –∫–∞—Ä—Ç–∫–∏ —Ç–æ–≤–∞—Ä—É
const ProductCard = ({ product, onAddToCart }) => (
  <div className="bg-white rounded-xl shadow-lg hover:shadow-xl transition-all duration-300 overflow-hidden group">
    <div className="relative">
      <div className="w-full h-48 bg-gradient-to-br from-blue-50 to-indigo-100 flex items-center justify-center">
        <span className="text-6xl">{product.emoji}</span>
      </div>
    </div>
    
    <div className="p-6">
      <div className="flex items-center gap-1 mb-2">
        <Star className="w-4 h-4 fill-yellow-400 text-yellow-400" />
        <span className="text-sm text-gray-600">{product.rating}</span>
        <span className="text-xs text-gray-400">({product.reviews})</span>
      </div>
      
      <h3 className="font-semibold text-lg text-gray-800 mb-2">{product.name}</h3>
      <p className="text-gray-600 text-sm mb-4 line-clamp-2">{product.description}</p>
      
      <div className="flex items-center justify-between">
        <div className="text-2xl font-bold text-indigo-600">
          ${product.price}
        </div>
        <button
          onClick={() => onAddToCart(product)}
          className="px-4 py-2 bg-indigo-600 hover:bg-indigo-700 text-white rounded-lg font-medium transition-all duration-200 hover:scale-105"
        >
          –î–æ–¥–∞—Ç–∏ –≤ –∫–æ—à–∏–∫
        </button>
      </div>
    </div>
  </div>
);

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –∫–æ—à–∏–∫–∞ (–±—ñ—á–Ω–∞ –ø–∞–Ω–µ–ª—å)
const CartDrawer = ({ isOpen, onClose, cart, updateQuantity, removeFromCart, getTotalPrice, getTotalItems, onCheckout }) => {
  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 z-50 overflow-hidden">
      <div className="absolute inset-0 bg-black bg-opacity-50" onClick={onClose}></div>
      <div className="absolute right-0 top-0 h-full w-full max-w-md bg-white shadow-xl">
        <div className="flex flex-col h-full">
          <div className="flex items-center justify-between p-4 border-b">
            <h2 className="text-xl font-semibold">üõí –ö–æ—à–∏–∫ ({getTotalItems()})</h2>
            <button onClick={onClose} className="p-2 hover:bg-gray-100 rounded-lg">
              <X className="w-5 h-5" />
            </button>
          </div>

          <div className="flex-1 overflow-y-auto p-4">
            {cart.length === 0 ? (
              <div className="text-center py-8">
                <ShoppingCart className="w-16 h-16 text-gray-300 mx-auto mb-4" />
                <p className="text-gray-500">–ö–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π</p>
              </div>
            ) : (
              <div className="space-y-4">
                {cart.map(item => (
                  <div key={item.id} className="flex items-center gap-3 p-3 bg-gray-50 rounded-lg">
                    <div className="w-16 h-16 bg-gradient-to-br from-blue-50 to-indigo-100 rounded-lg flex items-center justify-center">
                      <span className="text-2xl">{item.emoji}</span>
                    </div>
                    
                    <div className="flex-1">
                      <h4 className="font-medium text-sm">{item.name}</h4>
                      <p className="text-indigo-600 font-semibold">${item.price}</p>
                    </div>
                    
                    <div className="flex items-center gap-2">
                      <button
                        onClick={() => updateQuantity(item.id, item.quantity - 1)}
                        className="p-1 hover:bg-gray-200 rounded"
                      >
                        <Minus className="w-4 h-4" />
                      </button>
                      <span className="w-8 text-center font-medium">{item.quantity}</span>
                      <button
                        onClick={() => updateQuantity(item.id, item.quantity + 1)}
                        className="p-1 hover:bg-gray-200 rounded"
                      >
                        <Plus className="w-4 h-4" />
                      </button>
                      <button
                        onClick={() => removeFromCart(item.id)}
                        className="p-1 hover:bg-red-100 text-red-500 rounded ml-2"
                      >
                        <X className="w-4 h-4" />
                      </button>
                    </div>
                  </div>
                ))}
              </div>
            )}
          </div>

          {cart.length > 0 && (
            <div className="border-t p-4 space-y-4">
              <div className="flex justify-between items-center text-lg font-semibold">
                <span>–ó–∞–≥–∞–ª–æ–º:</span>
                <span className="text-indigo-600">${getTotalPrice().toFixed(2)}</span>
              </div>
              <button 
                onClick={onCheckout}
                className="w-full bg-indigo-600 hover:bg-indigo-700 text-white py-3 rounded-lg font-medium transition-colors"
              >
                üí≥ –û—Ñ–æ—Ä–º–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
              </button>
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

// Telegram Login (—Å–ø—Ä–æ—â–µ–Ω–∏–π)
const TelegramLogin = ({ onAuth }) => {
  const [isConnecting, setIsConnecting] = useState(false);

  const handleTelegramAuth = () => {
    setIsConnecting(true);
    // –°–∏–º—É–ª—é—î–º–æ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—é
    setTimeout(() => {
      const mockUser = {
        id: Date.now(),
        first_name: 'Telegram',
        last_name: 'User',
        username: 'tg_user'
      };
      onAuth(mockUser);
      setIsConnecting(false);
    }, 1000);
  };

  return (
    <button
      onClick={handleTelegramAuth}
      disabled={isConnecting}
      className="px-3 py-1 text-xs bg-blue-500 text-white rounded hover:bg-blue-600 transition-colors disabled:opacity-50"
    >
      {isConnecting ? '–ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è...' : 'üì± –ü—ñ–¥–∫–ª—é—á–∏—Ç–∏ Telegram'}
    </button>
  );
};

// Viber –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è (–∑–∞–≥–ª—É—à–∫–∞)
const ViberConnect = () => {
  const [isConnected, setIsConnected] = useState(false);

  const handleViberConnect = () => {
    const phone = prompt('–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –¥–ª—è Viber:');
    if (phone) {
      console.log('üì± Viber connection:', phone);
      // CRM –∑–∞–≥–ª—É—à–∫–∞
      // await fetch('/api/crm/viber-connect', {...})
      setIsConnected(true);
    }
  };

  return (
    <button
      onClick={handleViberConnect}
      className="px-3 py-1 text-xs bg-purple-500 text-white rounded hover:bg-purple-600 transition-colors"
    >
      {isConnected ? '‚úÖ –ü—ñ–¥–∫–ª—é—á–µ–Ω–æ' : 'üíú –ü—ñ–¥–∫–ª—é—á–∏—Ç–∏ Viber'}
    </button>
  );
};

// –ì–æ–ª–æ–≤–Ω–∏–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
const PantelMedShop = () => {
  const [selectedCategory, setSelectedCategory] = useState("–≤—Å—ñ");
  const [searchQuery, setSearchQuery] = useState("");
  const [isCartOpen, setIsCartOpen] = useState(false);
  const [currentPage, setCurrentPage] = useState('catalog');
  const [additionalTelegramUser, setAdditionalTelegramUser] = useState(null);
  
  const { telegramUser, isAuthorized } = useTelegramAuth();
  
  const {
    cart,
    addToCart,
    updateQuantity,
    removeFromCart,
    clearCart,
    getTotalPrice,
    getTotalItems
  } = useCartStore();

  // –§—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è —Ç–æ–≤–∞—Ä—ñ–≤
  const filteredProducts = PRODUCTS.filter(product => {
    const matchesCategory = selectedCategory === "–≤—Å—ñ" || product.category === selectedCategory;
    const matchesSearch = product.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
                         product.description.toLowerCase().includes(searchQuery.toLowerCase());
    return matchesCategory && matchesSearch;
  });

  const handleAddToCart = (product) => {
    addToCart(product);
    
    // –ü–æ–∫–∞–∑—É—î–º–æ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è
    const notification = document.createElement('div');
    notification.className = 'fixed top-4 right-4 bg-green-500 text-white px-4 py-2 rounded-lg shadow-lg z-50 transform transition-all duration-300';
    notification.textContent = `${product.name} –¥–æ–¥–∞–Ω–æ –≤ –∫–æ—à–∏–∫!`;
    document.body.appendChild(notification);
    
    setTimeout(() => {
      notification.style.transform = 'translateX(400px)';
      setTimeout(() => notification.remove(), 300);
    }, 2000);
  };

  const handleCheckout = () => {
    if (cart.length === 0) return;
    setCurrentPage('checkout');
    setIsCartOpen(false);
  };

  const saveOrderToCRM = async (orderData) => {
    // CRM –∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è –∑–∞–º–æ–≤–ª–µ–Ω—å
    try {
      console.log('üìä Saving order to CRM:', orderData);
      // await fetch('/api/crm/orders', {
      //   method: 'POST',
      //   headers: { 'Content-Type': 'application/json' },
      //   body: JSON.stringify(orderData)
      // });
    } catch (error) {
      console.error('CRM order save error:', error);
    }
  };

  const handleOrderSubmit = async (formData) => {
    const orderData = {
      items: cart,
      total_amount: getTotalPrice(),
      customer: formData,
      telegram_user: telegramUser || additionalTelegramUser,
      created_at: new Date().toISOString()
    };

    await saveOrderToCRM(orderData);
    setCurrentPage('payment');
  };

  // Checkout —Å—Ç–æ—Ä—ñ–Ω–∫–∞
  const CheckoutPage = () => {
    const [firstName, setFirstName] = useState(telegramUser?.first_name || '');
    const [lastName, setLastName] = useState(telegramUser?.last_name || '');
    const [phone, setPhone] = useState('');
    const [city, setCity] = useState('');
    const [warehouse, setWarehouse] = useState('');

    const handleSubmit = () => {
      if (!firstName || !lastName || !phone || !city || !warehouse) {
        alert('–ó–∞–ø–æ–≤–Ω—ñ—Ç—å –≤—Å—ñ –æ–±–æ–≤\'—è–∑–∫–æ–≤—ñ –ø–æ–ª—è');
        return;
      }

      handleOrderSubmit({
        firstName,
        lastName,
        phone,
        city,
        warehouse
      });
    };

    return (
      <div className="max-w-4xl mx-auto px-4 py-8">
        <button 
          onClick={() => setCurrentPage('catalog')}
          className="flex items-center gap-2 text-indigo-600 hover:text-indigo-700 mb-6"
        >
          <ArrowLeft className="w-4 h-4" />
          –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –∫–∞—Ç–∞–ª–æ–≥—É
        </button>

        <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
          <div className="space-y-6">
            <h2 className="text-2xl font-bold text-gray-900">üì¶ –û—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è</h2>
            
            {/* –ú–µ—Å–µ–Ω–¥–∂–µ—Ä–∏ */}
            <div className="bg-blue-50 p-6 rounded-lg">
              <h3 className="text-lg font-semibold mb-2">üì± –ó–≤–æ—Ä–æ—Ç–Ω–∏–π –∑–≤'—è–∑–æ–∫</h3>
              <p className="text-sm text-gray-600 mb-4">
                –ü—ñ–¥–∫–ª—é—á—ñ—Ç—å –º–µ—Å–µ–Ω–¥–∂–µ—Ä –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
              </p>
              
              {!isAuthorized && !additionalTelegramUser ? (
                <div className="space-y-3">
                  <div className="flex items-center gap-3 p-3 bg-white rounded-lg border">
                    <div className="w-8 h-8 bg-blue-500 rounded-full flex items-center justify-center">
                      <span className="text-white text-sm font-bold">TG</span>
                    </div>
                    <div className="flex-1">
                      <p className="font-medium text-sm">Telegram</p>
                    </div>
                    <TelegramLogin onAuth={setAdditionalTelegramUser} />
                  </div>

                  <div className="flex items-center gap-3 p-3 bg-white rounded-lg border">
                    <div className="w-8 h-8 bg-purple-500 rounded-full flex items-center justify-center">
                      <span className="text-white text-sm font-bold">V</span>
                    </div>
                    <div className="flex-1">
                      <p className="font-medium text-sm">Viber</p>
                    </div>
                    <ViberConnect />
                  </div>
                </div>
              ) : (
                <div className="flex items-center gap-3">
                  <div className="w-10 h-10 bg-blue-500 rounded-full flex items-center justify-center text-white font-medium">
                    {(telegramUser?.first_name?.[0] || additionalTelegramUser?.first_name?.[0] || 'U')}
                  </div>
                  <div>
                    <p className="font-medium">
                      {telegramUser?.first_name || additionalTelegramUser?.first_name} {telegramUser?.last_name || additionalTelegramUser?.last_name}
                    </p>
                    <p className="text-sm text-green-600">‚úÖ Telegram –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ</p>
                  </div>
                </div>
              )}
            </div>

            {/* –§–æ—Ä–º–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ */}
            <div className="space-y-4">
              <h3 className="text-lg font-semibold">üìç –î–æ—Å—Ç–∞–≤–∫–∞</h3>
              
              <div className="grid grid-cols-2 gap-4">
                <input
                  type="text"
                  placeholder="–Ü–º'—è *"
                  value={firstName}
                  onChange={(e) => setFirstName(e.target.value)}
                  className="px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 outline-none"
                />
                <input
                  type="text"
                  placeholder="–ü—Ä—ñ–∑–≤–∏—â–µ *"
                  value={lastName}
                  onChange={(e) => setLastName(e.target.value)}
                  className="px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 outline-none"
                />
              </div>

              <input
                type="tel"
                placeholder="–¢–µ–ª–µ—Ñ–æ–Ω *"
                value={phone}
                onChange={(e) => setPhone(e.target.value)}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 outline-none"
              />

              <input
                type="text"
                placeholder="–ú—ñ—Å—Ç–æ *"
                value={city}
                onChange={(e) => setCity(e.target.value)}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 outline-none"
              />

              <input
                type="text"
                placeholder="–í—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è –ù–æ–≤–æ—ó –ü–æ—à—Ç–∏ *"
                value={warehouse}
                onChange={(e) => setWarehouse(e.target.value)}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 outline-none"
              />
            </div>

            <button
              onClick={handleSubmit}
              className="w-full bg-indigo-600 hover:bg-indigo-700 text-white py-3 rounded-lg font-medium transition-colors"
            >
              üí≥ –ü–µ—Ä–µ–π—Ç–∏ –¥–æ –æ–ø–ª–∞—Ç–∏
            </button>
          </div>

          {/* –†–µ–∑—é–º–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è */}
          <div className="bg-gray-50 p-6 rounded-lg h-fit">
            <h3 className="text-lg font-semibold mb-4">üìã –í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è</h3>
            
            <div className="space-y-3 mb-4">
              {cart.map(item => (
                <div key={item.id} className="flex items-center justify-between">
                  <div className="flex items-center gap-3">
                    <span className="text-2xl">{item.emoji}</span>
                    <div>
                      <p className="font-medium text-sm">{item.name}</p>
                      <p className="text-xs text-gray-600">x{item.quantity}</p>
                    </div>
                  </div>
                  <span className="font-medium">${(item.price * item.quantity).toFixed(2)}</span>
                </div>
              ))}
            </div>

            <div className="border-t pt-4">
              <div className="flex justify-between text-lg font-semibold">
                <span>–ó–∞–≥–∞–ª–æ–º:</span>
                <span className="text-indigo-600">${getTotalPrice().toFixed(2)}</span>
              </div>
              <p className="text-sm text-gray-600 mt-2">–î–æ—Å—Ç–∞–≤–∫–∞ –ù–æ–≤–æ—é –ü–æ—à—Ç–æ—é</p>
            </div>
          </div>
        </div>
      </div>
    );
  };

  // Payment —Å—Ç–æ—Ä—ñ–Ω–∫–∞
  const PaymentPage = () => (
    <div className="min-h-screen bg-gradient-to-br from-indigo-600 to-purple-600 p-4 flex items-center justify-center">
      <div className="bg-white rounded-3xl p-8 max-w-lg w-full shadow-2xl">
        <h2 className="text-2xl font-bold text-center mb-6">üí≥ –û–ø–ª–∞—Ç–∞ USDT</h2>
        
        <div className="bg-gray-50 rounded-2xl p-6 mb-6">
          <div className="text-center mb-4">
            <div className="text-3xl font-bold">${getTotalPrice().toFixed(2)}</div>
            <div className="text-gray-600">–ù–∞–¥—ñ—à–ª—ñ—Ç—å USDT –Ω–∞ –∞–¥—Ä–µ—Å—É</div>
          </div>
          
          <div className="bg-white rounded-lg p-4 border-2 border-dashed border-gray-300">
            <div className="font-mono text-sm break-all text-center">
              TQeHa8VdwfyybxtioW4ggbnDC1rbWe8nFa
            </div>
          </div>
        </div>

        <div className="space-y-3">
          <button 
            onClick={() => {
              clearCart();
              setCurrentPage('thankyou');
            }}
            className="w-full bg-green-600 hover:bg-green-700 text-white py-3 rounded-xl font-semibold transition-all"
          >
            ‚úÖ –Ø –∑–¥—ñ–π—Å–Ω–∏–≤ –ø–ª–∞—Ç—ñ–∂
          </button>
          
          <button 
            onClick={() => setCurrentPage('checkout')}
            className="w-full bg-gray-300 hover:bg-gray-400 text-gray-700 py-3 rounded-xl font-semibold transition-all"
          >
            ‚Üê –ù–∞–∑–∞–¥
          </button>
        </div>
      </div>
    </div>
  );

  // Thank you —Å—Ç–æ—Ä—ñ–Ω–∫–∞
  const ThankYouPage = () => (
    <div className="max-w-2xl mx-auto px-4 py-16 text-center">
      <div className="text-6xl mb-6">üéâ</div>
      <h1 className="text-3xl font-bold text-gray-900 mb-4">–î—è–∫—É—î–º–æ –∑–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è!</h1>
      <p className="text-lg text-gray-600 mb-8">
        –í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–æ. –ú–∏ –∑–≤'—è–∂–µ–º–æ—Å—è –∑ –≤–∞–º–∏ –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º.
      </p>
      <button 
        onClick={() => setCurrentPage('catalog')}
        className="bg-indigo-600 hover:bg-indigo-700 text-white px-8 py-3 rounded-lg font-medium"
      >
        üè† –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –∫–∞—Ç–∞–ª–æ–≥—É
      </button>
    </div>
  );

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header */}
      <header className="bg-white shadow-sm sticky top-0 z-40">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex items-center justify-between h-16">
            <div className="flex items-center gap-4">
              {/* –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥ –¥–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∏ */}
              <button 
                onClick={() => window.location.href = 'index.html'}
                className="flex items-center gap-2 text-gray-600 hover:text-gray-800"
              >
                <ArrowLeft className="w-5 h-5" />
                <span className="hidden sm:inline">–î–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∏</span>
              </button>
              
              <div className="flex items-center gap-3">
                <div className="w-10 h-10 bg-indigo-600 rounded-lg flex items-center justify-center">
                  <Package className="w-6 h-6 text-white" />
                </div>
                <h1 className="text-xl font-bold text-gray-900">PantelMed Shop</h1>
              </div>
            </div>

            <div className="flex items-center gap-4">
              {/* –ü–æ–∫–∞–∑—É—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —è–∫—â–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π */}
              {(isAuthorized || additionalTelegramUser) && (
                <div className="hidden sm:flex items-center gap-2 text-sm">
                  <div className="w-8 h-8 bg-blue-500 rounded-full flex items-center justify-center text-white text-xs">
                    {(telegramUser?.first_name?.[0] || additionalTelegramUser?.first_name?.[0] || 'U')}
                  </div>
                  <span className="text-gray-700">
                    {telegramUser?.first_name || additionalTelegramUser?.first_name}
                  </span>
                </div>
              )}
              
              {/* –ö–æ—à–∏–∫ */}
              <button
                onClick={() => setIsCartOpen(true)}
                className="relative p-2 hover:bg-gray-100 rounded-lg"
              >
                <ShoppingCart className="w-5 h-5 text-gray-600" />
                {getTotalItems() > 0 && (
                  <span className="absolute -top-1 -right-1 bg-indigo-600 text-white text-xs rounded-full w-5 h-5 flex items-center justify-center">
                    {getTotalItems()}
                  </span>
                )}
              </button>
            </div>
          </div>
        </div>
      </header>

      {/* Main Content */}
      {currentPage === 'catalog' && (
        <main className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
          {/* Hero —Å–µ–∫—Ü—ñ—è */}
          <div className="bg-gradient-to-r from-indigo-600 to-purple-600 rounded-2xl text-white p-8 mb-8">
            <h2 className="text-3xl font-bold mb-4">üõí –ú–∞–≥–∞–∑–∏–Ω –ë–ê–î—ñ–≤</h2>
            <p className="text-indigo-100 mb-6">–Ø–∫—ñ—Å–Ω—ñ –¥–æ–±–∞–≤–∫–∏ –¥–ª—è –≤–∞—à–æ–≥–æ –∑–¥–æ—Ä–æ–≤'—è</p>
            <div className="text-sm bg-white/20 rounded-lg p-3 inline-block">
              üí° –ü—ñ–¥–∫–∞–∑–∫–∞: –î–ª—è —Å—É–º–∏ ~$2.6 –æ–±–µ—Ä—ñ—Ç—å 3-4 —Ç–æ–≤–∞—Ä–∏
            </div>
          </div>

          {/* –§—ñ–ª—å—Ç—Ä–∏ */}
          <div className="flex flex-col sm:flex-row gap-4 mb-8">
            <div className="relative flex-1">
              <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-5 h-5" />
              <input
                type="text"
                placeholder="–ü–æ—à—É–∫ –ë–ê–î—ñ–≤..."
                value={searchQuery}
                onChange={(e) => setSearchQuery(e.target.value)}
                className="w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500"
              />
            </div>
            
            <div className="flex gap-2 overflow-x-auto">
              {CATEGORIES.map(category => (
                <button
                  key={category}
                  onClick={() => setSelectedCategory(category)}
                  className={`px-4 py-2 rounded-lg font-medium whitespace-nowrap transition-colors ${
                    selectedCategory === category
                      ? 'bg-indigo-600 text-white'
                      : 'bg-white text-gray-600 hover:bg-gray-50'
                  }`}
                >
                  {category}
                </button>
              ))}
            </div>
          </div>

          {/* –¢–æ–≤–∞—Ä–∏ */}
          <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
            {filteredProducts.map(product => (
              <ProductCard
                key={product.id}
                product={product}
                onAddToCart={handleAddToCart}
              />
            ))}
          </div>

          {filteredProducts.length === 0 && (
            <div className="text-center py-12">
              <Package className="w-16 h-16 text-gray-300 mx-auto mb-4" />
              <p className="text-gray-500 text-lg">–¢–æ–≤–∞—Ä—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ</p>
            </div>
          )}
        </main>
      )}

      {currentPage === 'checkout' && <CheckoutPage />}
      {currentPage === 'payment' && <PaymentPage />}
      {currentPage === 'thankyou' && <ThankYouPage />}

      {/* –ö–æ—à–∏–∫ */}
      <CartDrawer
        isOpen={isCartOpen}
        onClose={() => setIsCartOpen(false)}
        cart={cart}
        updateQuantity={updateQuantity}
        removeFromCart={removeFromCart}
        getTotalPrice={getTotalPrice}
        getTotalItems={getTotalItems}
        onCheckout={handleCheckout}
      />
    </div>
  );
};

export default PantelMedShop;
